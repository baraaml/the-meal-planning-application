├── MainActivity.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow

import android.annotation.SuppressLint
import android.app.Application
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.ShoppingCart
import androidx.compose.material.icons.outlined.Home
import androidx.compose.material.icons.outlined.Menu
import androidx.compose.material.icons.outlined.Person
import androidx.compose.material.icons.outlined.Search
import androidx.compose.material.icons.outlined.ShoppingCart
import androidx.compose.material3.BadgedBox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavGraph.Companion.findStartDestination
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import androidx.navigation.navDeepLink
import com.example.mealflow.data.repository.MealRepository
import com.example.mealflow.ui.screens.CommunityPage
import com.example.mealflow.ui.screens.ForgetPasswordPage
import com.example.mealflow.ui.screens.GroceriesPage
import com.example.mealflow.ui.screens.HomePage
import com.example.mealflow.ui.screens.LoginPage
import com.example.mealflow.ui.screens.MealDetailScreen
import com.example.mealflow.ui.screens.OtpPage
import com.example.mealflow.ui.screens.PlannerPage
import com.example.mealflow.ui.screens.RegisterPage
import com.example.mealflow.ui.screens.ResetPasswordPage
import com.example.mealflow.ui.screens.SearchPage
import com.example.mealflow.ui.screens.StartPage
import com.example.mealflow.ui.theme.MealFlowTheme
import com.example.mealflow.viewModel.LoginViewModel
import com.example.mealflow.viewModel.MealViewModel
import com.example.mealflow.viewModel.MealViewModelFactory
import com.example.mealflow.viewModel.RegisterViewModel

// Keep this data class from the old code
data class BottomNavigationItem(
    val title: String,
    val selectedIcon: ImageVector,
    val nonSelectedIcon: ImageVector,
    val hasNews: Boolean,
    val badgeCount: Int? = null,
    val route: String // Added route property for navigation
)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // Set the uncaught exception handler from the old code
        Thread.setDefaultUncaughtExceptionHandler { _, exception ->
            exception.printStackTrace()
            // We're letting the app continue without crashing
        }

        setContent {
            MealFlowTheme {
                val navController = rememberNavController()

                // Deep Link handling
                LaunchedEffect(intent?.data) {
                    intent?.data?.getQueryParameter("token")?.let { token ->
                        Log.d("MainActivity", "🔹 Token received: $token")
                        navController.navigate("Reset Password Page?token=$token")
                    }
                }

                // Use a MealViewModel with proper initialization
                val context = LocalContext.current
                val viewModel = viewModel<MealViewModel>(
                    factory = MealViewModelFactory(context.applicationContext as Application)
                )

                // Initialize login view model
                val loginViewModel: LoginViewModel = viewModel()

                // Trigger initial data fetch
                LaunchedEffect(Unit) {
                    Log.d("MainActivity", "Triggering initial meal fetch")
                    viewModel.fetchRecommendedMeals()
                }

                // Also fetch meals when login is successful
                val loginSuccessful by loginViewModel.loginSuccessful.observeAsState(false)
                LaunchedEffect(loginSuccessful) {
                    if (loginSuccessful) {
                        Log.d("MainActivity", "Login successful, refreshing meals")
                        viewModel.refreshMeals() // Force a refresh after login
                    }
                }

                AppNavHost(navController, viewModel, loginViewModel)
            }
        }
    }

    //----------------------------------------------------------------------------
// Function to move between pages with bottom navigation
    @SuppressLint("StateFlowValueCalledInComposition")
    @Composable
    fun AppNavHost(
        navController: NavHostController,
        mealViewModel: MealViewModel,
        loginViewModel: LoginViewModel
    ) {
        val registerViewModel: RegisterViewModel = viewModel()
        val context = LocalContext.current

        // Get meal data state
        val meals by mealViewModel.meals.collectAsState()
        val isLoading by mealViewModel.isLoading.collectAsState()
        val errorMessage by mealViewModel.errorMessage.collectAsState()

        // Define the main navigation items
        val navigationItems = listOf(
            BottomNavigationItem(
                title = "Home",
                selectedIcon = Icons.Filled.Home,
                nonSelectedIcon = Icons.Outlined.Home,
                hasNews = false,
                route = "Home Page"
            ),
            BottomNavigationItem(
                title = "Search",
                selectedIcon = Icons.Filled.Search,
                nonSelectedIcon = Icons.Outlined.Search,
                hasNews = false,
                route = "Search Page"
            ),
            BottomNavigationItem(
                title = "Planner",
                selectedIcon = Icons.Filled.Menu,
                nonSelectedIcon = Icons.Outlined.Menu,
                hasNews = false,
                route = "Planner Page"
            ),
            BottomNavigationItem(
                title = "Groceries",
                selectedIcon = Icons.Filled.ShoppingCart,
                nonSelectedIcon = Icons.Outlined.ShoppingCart,
                hasNews = false,
                route = "Groceries Page"
            ),
            BottomNavigationItem(
                title = "Community",
                selectedIcon = Icons.Filled.Person,
                nonSelectedIcon = Icons.Outlined.Person,
                hasNews = false,
                route = "Community Page"
            )
        )

        // Define screens that should show bottom navigation
        val mainScreens = setOf(
            "Home Page",
            "Search Page",
            "Planner Page",
            "Groceries Page",
            "Community Page",
            "meal_detail" // Handle specially for hierarchy
        )

        // Get current route to determine whether to show bottom nav
        val navBackStackEntry by navController.currentBackStackEntryAsState()
        val currentRoute = navBackStackEntry?.destination?.route

        // Determine if we should show the bottom bar
        val shouldShowBottomBar = currentRoute?.let { route ->
            // Check if route matches any main screen or starts with meal_detail
            mainScreens.any { screen ->
                route == screen || (screen == "meal_detail" && route.startsWith("meal_detail"))
            }
        } ?: false

        // Get the selected index based on the current route
        val currentIndex = navigationItems.indexOfFirst {
            currentRoute == it.route || (it.route == "Home Page" && currentRoute?.startsWith("meal_detail") == true)
        }.let { index -> if (index < 0) 0 else index }

        // Track selected index for bottom nav
        var selectedItemIndex by rememberSaveable {
            mutableStateOf(currentIndex)
        }

        // Update selected index when route changes
        LaunchedEffect(currentRoute) {
            val index = navigationItems.indexOfFirst {
                currentRoute == it.route || (it.route == "Home Page" && currentRoute?.startsWith("meal_detail") == true)
            }
            if (index >= 0) {
                selectedItemIndex = index
            }
        }

        Scaffold(
            bottomBar = {
                if (shouldShowBottomBar) {
                    NavigationBar {
                        navigationItems.forEachIndexed { index, item ->
                            NavigationBarItem(
                                selected = selectedItemIndex == index,
                                onClick = {
                                    try {
                                        selectedItemIndex = index
                                        // Navigate to the route defined in the navigation item
                                        navController.navigate(item.route) {
                                            // Pop up to the start destination of the graph
                                            popUpTo(navController.graph.findStartDestination().id) {
                                                saveState = true
                                            }
                                            // Avoid multiple copies of the same destination
                                            launchSingleTop = true
                                            // Restore state when reselecting a previously selected item
                                            restoreState = true
                                        }
                                    } catch (e: Exception) {
                                        Log.e("Navigation", "Error navigating to screen", e)
                                        Toast.makeText(
                                            context,
                                            "Navigation error: ${e.message}",
                                            Toast.LENGTH_SHORT
                                        ).show()
                                    }
                                },
                                label = { Text(text = item.title) },
                                alwaysShowLabel = false,
                                icon = {
                                    BadgedBox(
                                        badge = {
                                            // Badge logic here if needed
                                        }
                                    ) {
                                        Icon(
                                            imageVector = if (index == selectedItemIndex) {
                                                item.selectedIcon
                                            } else item.nonSelectedIcon,
                                            contentDescription = item.title
                                        )
                                    }
                                }
                            )
                        }
                    }
                }
            }
        ) { innerPadding ->
            NavHost(
                navController = navController,
                startDestination = "Start Page",
                modifier = Modifier.padding(innerPadding)
            ) {
                // Auth screens (no bottom nav)
                composable("Start Page") {
                    StartPage(navController)
                }
                composable("Login Page") {
                    LoginPage(navController, loginViewModel)
                }
                composable("Register Page") {
                    RegisterPage(navController, registerViewModel)
                }
                composable("Otp Page") {
                    OtpPage(navController, registerViewModel)
                }
                composable("Forget Password Page") {
                    ForgetPasswordPage(navController)
                }
                composable(
                    route = "Reset Password Page?token={token}",
                    arguments = listOf(navArgument("token") { nullable = true }),
                    deepLinks = listOf(navDeepLink {
                        uriPattern = "https://iiacbca.r.bh.d.sendibt3.com/tr/cl?token={token}"
                    })
                ) { backStackEntry ->
                    val token = backStackEntry.arguments?.getString("token")
                    ResetPasswordPage(navController, token)
                }

                // Main screens (with bottom nav)
                composable("Home Page") {
                    // Pass the viewModel to enable data fetching and proper loading states
                    HomePage(
                        meals = meals.ifEmpty { emptyList() }, // Don't use sample meals
                        onMealClick = { meal ->
                            navController.navigate("meal_detail/${meal.mealId}")
                        },
                        viewModel = mealViewModel // Pass the viewModel
                    )
                }

                composable("Search Page") {
                    SearchPage(
                        meals = meals.ifEmpty { emptyList() }, // Use fetched meals without fallback
                        onMealClick = { meal ->
                            navController.navigate("meal_detail/${meal.mealId}")
                        },
                        viewModel = mealViewModel,
                        navController = navController
                    )
                }

                composable("Planner Page") {
                    PlannerPage(navController)
                }

                composable("Groceries Page") {
                    GroceriesPage(navController)
                }

                composable("Community Page") {
                    CommunityPage(navController)
                }

                composable(
                    route = "meal_detail/{mealId}",
                    arguments = listOf(navArgument("mealId") { type = NavType.StringType })
                ) { backStackEntry ->
                    val mealId = backStackEntry.arguments?.getString("mealId")

                    // First try to find the meal in the fetched data
                    val meal = meals.find { it.mealId == mealId }

                    if (meal != null) {
                        MealDetailScreen(
                            meal = meal,
                            onNavigateBack = { navController.popBackStack() }
                        )
                    } else {
                        // Show loading instead of "Meal not found" if we're still fetching
                        if (isLoading) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.Center
                            ) {
                                CircularProgressIndicator()
                            }
                        } else {
                            // If not loading and meal not found, show error message
                            Text(
                                "Meal not found",
                                modifier = Modifier.padding(16.dp),
                                style = MaterialTheme.typography.headlineMedium
                            )
                        }
                    }
                }
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── Test.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp

@Composable
fun RegisterInput1()
{
    var text by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var repassword by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }
    // Input field
    OutlinedTextField(
        value = text,
        onValueChange = { newText -> text = newText },
        label = { Text("Add an Email") },
        singleLine = true,
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 20.dp, top = 20.dp, end = 20.dp)
    )

    // حقل كلمة السر
    OutlinedTextField(
        value = password,
        onValueChange = { newPassword -> password = newPassword },
        label = { Text("Enter your paswoed") },
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 20.dp, top = 20.dp, end = 20.dp),
        singleLine = true,
        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
        keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
    )
    // حقل كلمة السر
    OutlinedTextField(
        value = repassword,
        onValueChange = { newPassword -> repassword = newPassword },
        label = { Text("Re-Enter your paswoed") },
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp),
        singleLine = true,
        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
        keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
    )
    Row {
        Checkbox(
            checked = passwordVisible,
            onCheckedChange = { passwordVisible = it },
            modifier = Modifier.padding(start = 5.dp)
        )
        //Text(text = "Show Password", modifier = Modifier.padding(start = 8.dp))
        Text(text = "show password", Modifier.padding(top = 15.dp))
    }
}


// حقل كلمة السر
//OutlinedTextField(
//value = password,
//onValueChange = { newPassword -> password = newPassword },
//label = { Text("Enter your paswoed") },
//modifier = Modifier
//.fillMaxWidth()
//.padding(start = 20.dp, top = 20.dp, end = 20.dp),
//singleLine = true,
//textStyle = TextStyle(color = Color.Black), // تحديد لون النص
//visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
//keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
//)

////////////////////////////////////////////////////////////////////////////////////////

├── buttons
│   ├── Backup.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.buttons

// ----------------------- LoginApi ---------------------------
//fun loginApi(email: String, password: String, navController: NavController,viewModel: LoginViewModel) = runBlocking {
//    val client = HttpClient(CIO) {
//        install(ContentNegotiation) {
//            json(Json { ignoreUnknownKeys = true })
//        }
//    }
//
//    val url = "https://mealflow.ddns.net/api/v1/users/login"
//
//    try {
//        Log.d("API", "📩 بيانات الطلب: password=$password, email=$email")
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(LoginRequest(email,password))
//        }
//
//        val responseBody = Json.decodeFromString<LoginResponse>(response.bodyAsText())
//        val responseText = response.bodyAsText()
//
//        viewModel.setLoginMessage(responseBody.message)
//        Log.d("API", "🔹 استجابة الخادم: $responseBody")
//        Log.d("API", "🔹 استجابة الخادم: $responseText")
//        if (responseBody.message == "Login successful") {
//            println("Registration successful!")
//            navController.navigate("Test Page")
//        } else {
//            println(responseBody.message)
//            Log.e("API", "❌ خطأ في التحقق: ${responseBody.message}")
//        }
//        if (response.status == HttpStatusCode.OK || response.status == HttpStatusCode.Accepted) {
//            if (responseBody.success) {
//                Log.d("API", "✅ التحقق ناجح! الانتقال إلى الصفحة التالية")
//                navController.navigate("Test Page")
//            } else {
//                Log.e("API", "❌ خطأ في التحقق: ${responseBody.message}")
//            }
//        } else {
//            Log.e("API", "⚠️ استجابة غير متوقعة: ${response.status}")
//        }
//    } catch (e: Exception) {
//        println("Registration failed: ${e.message}")
//        Log.e("API", "❌ استثناء أثناء تنفيذ الطلب: ${e.message}")
//        //navController.navigate("Test Page")
//    } finally {
//        client.close()
//    }
//}

//---------------------- ApiVerifyEmail -----------------------
//// دالة تسجيل المستخدم بدون إرجاع قيمة
//fun  verifyEmail(context: Context, otp: String, email: String, navController: NavController) = runBlocking {
//    val client = HttpClient(CIO) {
//        install(ContentNegotiation) {
//            json(Json { ignoreUnknownKeys = true })
//        }
//    }
//
//    val url = "https://mealflow.ddns.net/api/v1/users/verify-email"
//
//    try {
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(OtpRequest(otp, email))
//        }
//        val responseBody = Json.decodeFromString<OtpResponse>(response.bodyAsText())
//
//        if (responseBody.success) {
//            println("Registration successful!")
//            navController.navigate("Test Page")
//        } else {
//            Toast.makeText(context, responseBody.message, Toast.LENGTH_LONG).show()
//            Log.e("API", "خطأ في جلب البيانات: ${responseBody.message}")
//        }
//    } catch (e: Exception) {
//        Toast.makeText(context, "Registration failed: ${e.message}", Toast.LENGTH_LONG).show()
//        Log.e("API", "خطأ في جلب البيانات: ${e.message}")
//        println("otp : ${otp} i: ${email}")
//    } finally {
//        client.close()
//    }
//}
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//import io.ktor.client.*
//import io.ktor.client.engine.cio.*
//import io.ktor.client.request.*
//import io.ktor.client.statement.*
//import kotlinx.coroutines.runBlocking
//
//fun main() = runBlocking {
//    val client = HttpClient(CIO)
//    val response: HttpResponse = client.get("https://jsonplaceholder.typicode.com/posts/1")
//
//    println(response.bodyAsText())
//    client.close()
//}

//import io.ktor.client.*
//import io.ktor.client.engine.cio.*
//import io.ktor.client.request.*
//import io.ktor.client.statement.*
//import io.ktor.http.*
//import kotlinx.coroutines.runBlocking
//import kotlinx.serialization.Serializable
//import kotlinx.serialization.json.Json
//
//// نموذج البيانات (Data Model)
//@Serializable
//data class RegisterRequest(val username: String, val email: String, val password: String)
//
//// دالة لإنشاء الحساب
//fun registerUser(username: String, email: String, password: String) = runBlocking {
//    val client = HttpClient(CIO) // محرك الشبكة
//    val url = "https://mealflow.ddns.net/api/v1/register" // عدل هذا بالـ API الخاص بك
//
//    try {
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(RegisterRequest(username, email, password))
//        }
//
//        println("Response: ${response.status}")
//        println("Body: ${response.bodyAsText()}") // طباعة استجابة السيرفر
//    } catch (e: Exception) {
//        println("Error: ${e.message}")
//    } finally {
//        client.close()
//    }
//}
//
//// تجربة تسجيل مستخدم جديد
//fun main() {
//    registerUser("abdelrahman", "abdoag163@gmail.com", "StrongPassword123")
//}

//import io.ktor.client.*
//import io.ktor.client.engine.cio.*
//import io.ktor.client.plugins.contentnegotiation.*
//import io.ktor.client.request.*
//import io.ktor.client.statement.*
//import io.ktor.http.*
//import io.ktor.serialization.kotlinx.json.*
//import kotlinx.coroutines.runBlocking
//import kotlinx.serialization.Serializable
//import kotlinx.serialization.json.Json
//
//
//// نموذج البيانات القابل للتسلسل
//@Serializable
//data class RegisterRequest(val username: String, val email: String, val password: String)
//
//// دالة تسجيل المستخدم
//fun registerUser(username: String, email: String, password: String) = runBlocking {
//    val client = HttpClient(CIO) {
//        install(ContentNegotiation) {
//            json(Json { ignoreUnknownKeys = true })
//        }
//    }
//
//    val url = "https://mealflow.ddns.net/api/v1/register"
//
//    try {
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(RegisterRequest(username, email, password))
//        }
//
//        println("Response: ${response.status}")
//        println("Body: ${response.bodyAsText()}")
//    } catch (e: Exception) {
//        println("Error: ${e.message}")
//    } finally {
//        client.close()
//    }
//}
//
//// تشغيل البرنامج
//fun main() {
//    registerUser("abdelrahman", "abdoag163@gmail.com", "StrongPassword123")
//}
//import android.content.Context
//import android.widget.Toast
//import io.ktor.client.*
//import io.ktor.client.call.*
//import io.ktor.client.engine.cio.*
//import io.ktor.client.plugins.contentnegotiation.*
//import io.ktor.client.request.*
//import io.ktor.client.statement.*
//import io.ktor.http.*
//import io.ktor.serialization.kotlinx.json.json
//import kotlinx.coroutines.CoroutineScope
//import kotlinx.coroutines.Dispatchers
//import kotlinx.coroutines.launch
//import kotlinx.coroutines.runBlocking
//import kotlinx.coroutines.withContext
//import kotlinx.serialization.Serializable
//import kotlinx.serialization.json.Json
//
//@Serializable
//data class RegisterRequest(val username: String, val email: String, val password: String)

//fun registerUser(username: String, email: String, password: String) = runBlocking {
//    val client = HttpClient(CIO) {
//        install(ContentNegotiation) {
//            json(Json { ignoreUnknownKeys = true })
//        }
//    }
//
//    val url = "https://mealflow.ddns.net/api/v1/register"
//
//    try {
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(RegisterRequest(username, email, password))
//        }
//
//        println("Response: ${response.status}")
//        println("Body: ${response.body<String>()}")
//    } catch (e: Exception) {
//        println("Error: ${e.message}")
//
//    } finally {
//        client.close()
//    }
//}

//fun registerUser(context: Context, username: String, email: String, password: String) {
//    CoroutineScope(Dispatchers.IO).launch {
//        val client = HttpClient(CIO) {
//            install(ContentNegotiation) {
//                json()
//            }
//        }
//        val url = "https://mealflow.ddns.net/api/v1/register"
//
//        try {
//            val response: HttpResponse = client.post(url) {
//                contentType(ContentType.Application.Json)
//                setBody(RegisterRequest(username, email, password))
//            }
//
//            withContext(Dispatchers.Main) {
//                Toast.makeText(context, "Response: ${response.status}", Toast.LENGTH_LONG).show()
//            }
//        } catch (e: Exception) {
//            withContext(Dispatchers.Main) {
//                Toast.makeText(context, "Error: ${e.message}", Toast.LENGTH_LONG).show()
//            }
//        } finally {
//            client.close()
//        }
//    }
//}
//fun registerUser(context: Context, username: String, email: String, password: String, onSuccess: (Boolean) -> Unit) {
//    CoroutineScope(Dispatchers.IO).launch {
//        val client = HttpClient(CIO) {
//            install(ContentNegotiation) {
//                json()
//            }
//        }
//        val url = "https://mealflow.ddns.net/api/v1/users/register"
//
//        try {
//            val response: HttpResponse = client.post(url) {
//                contentType(ContentType.Application.Json)
//                setBody(RegisterRequest(username, email, password))
//            }
//
//            withContext(Dispatchers.Main) {
//                if (response.status == HttpStatusCode.OK) {
//                    onSuccess(true)
//                } else {
//                    Toast.makeText(context, "Registration failed!", Toast.LENGTH_LONG).show()
//                    onSuccess(false)
//                }
//            }
//        } catch (e: Exception) {
//            withContext(Dispatchers.Main) {
//                Toast.makeText(context, "Error: ${e.message}", Toast.LENGTH_LONG).show()
//                onSuccess(false)
//            }
//        } finally {
//            client.close()
//        }
//    }
//}
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//package com.example.mealflow.network
//
//import kotlinx.coroutines.runBlocking
//import retrofit2.Retrofit
//import retrofit2.converter.scalars.ScalarsConverterFactory
//import retrofit2.http.GET
//
//// 1️⃣ تعريف API لجلب كل المستخدمين
//interface ApiService {
//    @GET("/api/v1/users/") // تأكد أن الـ API يدعم جلب جميع المستخدمين
//    suspend fun getAllUsers(): String
//}
//
//// 2️⃣ إنشاء Retrofit Instance مع ScalarsConverterFactory
//val retrofit = Retrofit.Builder()
//    .baseUrl("https://someday-to-do-list-v1.vercel.app") // استبدله بالرابط الصحيح
//    .addConverterFactory(ScalarsConverterFactory.create()) // إرجاع JSON كنص
//    .build()
//
//// 3️⃣ إنشاء كائن من API
//val api = retrofit.create(ApiService::class.java)
//
//// 4️⃣ تشغيل التطبيق وجلب البيانات
//fun main() = runBlocking {
//    try {
//        val response = api.getAllUsers() // جلب كل المستخدمين
//        println(response) // طباعة الـ JSON كما هو
//    } catch (e: Exception) {
//        println("Error fetching users: ${e.message}")
//    }
//}
//---------------------------------------------------------------------------------------------
//import kotlinx.coroutines.runBlocking
//import retrofit2.Retrofit
//import retrofit2.converter.scalars.ScalarsConverterFactory
//import retrofit2.http.Body
//import retrofit2.http.POST
//
//interface ApiService {
//    @POST("/api/v1/users/") // تعديل الطلب ليكون POST
//    suspend fun createUser(@Body userData: String): String // إرسال بيانات المستخدم
//}
//// 2️⃣ إنشاء Retrofit Instance مع ScalarsConverterFactory
//val retrofit = Retrofit.Builder()
//    .baseUrl("https://mealflow.ddns.net/api/v1/users/register") // استبدله بالرابط الصحيح
//    .addConverterFactory(ScalarsConverterFactory.create()) // إرجاع JSON كنص
//    .build()
//
//// 3️⃣ إنشاء كائن من API
//val api = retrofit.create(ApiService::class.java)
//
//fun main() = runBlocking {
//    try {
//        val newUserData = """{"username": "John Doe", "email": "john@example.com"}""" // بيانات المستخدم الجديد
//        val response = api.createUser(newUserData) // إرسال البيانات
//        println(response) // طباعة الاستجابة
//    } catch (e: Exception) {
//        println("Error creating user: ${e.message}")
//    }
//}

//------------------------------------------------------------------------------------------

//import io.ktor.client.*
//import io.ktor.client.engine.cio.*
//import io.ktor.client.plugins.contentnegotiation.*
//import io.ktor.client.request.*
//import io.ktor.client.statement.*
//import io.ktor.http.*
//import io.ktor.serialization.kotlinx.json.*
//import kotlinx.coroutines.runBlocking
//import kotlinx.serialization.Serializable
//import kotlinx.serialization.json.Json
//
//
//// نموذج البيانات القابل للتسلسل
//@Serializable
//data class RegisterRequest(val username: String, val email: String, val password: String)
//
//// دالة تسجيل المستخدم
//fun registerUser1(username: String, email: String, password: String) = runBlocking {
//    val client = HttpClient(CIO) {
//        install(ContentNegotiation) {
//            json(Json { ignoreUnknownKeys = true })
//        }
//    }
//
//    val url = "https://mealflow.ddns.net/api/v1/users/register"
//
//    try {
//        val response: HttpResponse = client.post(url) {
//            contentType(ContentType.Application.Json)
//            setBody(RegisterRequest(username, email, password))
//        }
//
//        println("Response: ${response.status}")
//        println("Body: ${response.bodyAsText()}")
//    } catch (e: Exception) {
//        println("Error: ${e.message}")
//    } finally {
//        client.close()
//    }
//}
//
//// تشغيل البرنامج
//fun main() {
//    registerUser1("abdelrahman", "abdoag163@gmail.com", "StrongPassword#123")
//}
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////

│   ├── Buttons.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.buttons

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun BackButton(onClick: () -> Unit, modifier: Modifier = Modifier) {
    IconButton(
        onClick = onClick,
        modifier = Modifier
            .padding(20.dp)
            .size(56.dp)
            .background(Color(0xFF000000), CircleShape)
            .border(1.dp, Color.Black, CircleShape)
    ) {
        Icon(
            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
            contentDescription = "رجوع",
            tint = Color.White
        )
    }
}

@Composable
fun FixedButton(onClick: () -> Unit, textOnButton: String, modifier: Modifier = Modifier) {
    Button(
        onClick = { /*TODO*/ },
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp)
            .height(50.dp)
            .border(2.dp, Color.Black, RoundedCornerShape(50.dp))
        , shape = RoundedCornerShape(50.dp),
        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF000000))
    ) {
        Text(
            text = textOnButton,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            color = Color.White
        )
    }
}

@Composable
fun DynamicButton(
    onClick: () -> Unit, textOnButton: String,
    modifier: Modifier = Modifier,
    buttonWidthDynamic: Int
) {
    Button(
        onClick = onClick,
        modifier = Modifier
            .width(buttonWidthDynamic.dp)
            .padding(20.dp)
            .height(50.dp)
            .border(2.dp, Color.Black, RoundedCornerShape(50.dp))
        , shape = RoundedCornerShape(50.dp),
        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF000000))
    ) {
        Text(
            text = textOnButton,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            color = Color.White
        )
    }
}

//-------------------------------------------------------
//-------------------------------------------------------
//----------------------------------------------
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewButton() {
    Column {
        BackButton(onClick = {},  modifier = Modifier)
//        DynamicButton(onClick = { /*TODO*/ }, textOnButton = "Sign in", buttonWidthDynamic = 200)
//        FixedButton(onClick = { /*TODO*/ }, "Log in")
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── data
│   ├── model
│   │   ├── MealModels.kt

////////////////////////////////////////////////////////////////////////////////////////
// Location: data/model/MealModels.kt
package com.example.mealflow.data.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class MealResponse(
    @SerialName("data")
    val data: List<Meal>
)

@Serializable
data class Meal(
    @SerialName("meal_id")
    val mealId: String,
    @SerialName("name")
    val name: String,
    @SerialName("description")
    val description: String,
    @SerialName("image_url")
    val imageUrl: String,
    @SerialName("tags")
    val tags: List<String>,
    @SerialName("ingredients")
    val ingredients: List<Ingredient>,
    @SerialName("instructions")
    val instructions: List<String>,
    @SerialName("cookware")
    val cookware: List<String>,
    @SerialName("preparation_time")
    val preparationTime: Int,
    @SerialName("cooking_time")
    val cookingTime: Int,
    @SerialName("servings")
    val servings: Int,
    @SerialName("calories_per_serving")
    val caloriesPerServing: Int,
    @SerialName("rating")
    val rating: Double,
    @SerialName("reviews_count")
    val reviewsCount: Int,
    @SerialName("created_by")
    val createdBy: User,
    @SerialName("is_favorited")
    val isFavorited: Boolean,
    @SerialName("is_saved")
    val isSaved: Boolean,
    @SerialName("notes")
    val notes: List<Note>,
    @SerialName("interactions")
    val interactions: Interactions,
    @SerialName("created_at")
    val createdAt: String,
    @SerialName("updated_at")
    val updatedAt: String
)

@Serializable
data class Ingredient(
    @SerialName("name")
    val name: String,
    @SerialName("quantity")
    val quantity: Double,
    @SerialName("unit")
    val unit: String
)

@Serializable
data class User(
    @SerialName("user_id")
    val userId: String,
    @SerialName("username")
    val username: String,
    @SerialName("profile_picture")
    val profilePicture: String? = null
)

@Serializable
data class Note(
    @SerialName("note_id")
    val noteId: String,
    @SerialName("user")
    val user: User,
    @SerialName("comment")
    val comment: String,
    @SerialName("image_url")
    val imageUrl: String? = null,
    @SerialName("tags")
    val tags: List<String> = emptyList(),
    @SerialName("did_cook")
    val didCook: Boolean,
    @SerialName("likes")
    val likes: Int,
    @SerialName("dislikes")
    val dislikes: Int
)

@Serializable
data class Interactions(
    @SerialName("views")
    val views: Int,
    @SerialName("likes")
    val likes: Int,
    @SerialName("dislikes")
    val dislikes: Int,
    @SerialName("shares")
    val shares: Int
)
////////////////////////////////////////////////////////////////////////////////////////

│   ├── repository
│       ├── MealRepository.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.data.repository

import android.content.Context
import android.util.Log
import com.example.mealflow.data.model.Meal
import com.example.mealflow.data.model.MealResponse
import com.example.mealflow.network.ApiClient
import com.example.mealflow.network.ApiMeal
import io.ktor.client.call.body
import io.ktor.client.request.get
import io.ktor.http.isSuccess

class MealRepository(private val context: Context) {
    private val apiMeal = ApiMeal()

    suspend fun getRecommendedMeals(): Result<List<Meal>> {
        Log.d("MealRepository", "Fetching recommended meals")
        return apiMeal.getRecommendedMeals().map { response ->
            response.data
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── fix.py

////////////////////////////////////////////////////////////////////////////////////////
import os
import re

# Set the project root directory
project_root = os.path.dirname(os.path.abspath(__file__))

# Collect all Kotlin files in the 'ui' folder
ui_files = []
for root, dirs, files in os.walk(project_root):
    if 'ui' in root:  # Only consider files inside 'ui'
        for file in files:
            if file.endswith('.kt'):
                ui_files.append(os.path.join(root, file))

# Find broken imports in 'ui' files
def find_broken_imports():
    broken_imports = {}
    for file_path in ui_files:
        with open(file_path, 'r') as file:
            content = file.read()
            imports = re.findall(r'import\s+([a-zA-Z0-9._]+)', content)

            for imp in imports:
                # Check if the import exists in the 'ui' folder
                if not any(imp.replace('.', '/') in f for f in ui_files):
                    if file_path not in broken_imports:
                        broken_imports[file_path] = []
                    broken_imports[file_path].append(imp)

    return broken_imports

# Fix broken 'ui' imports smartly
def fix_ui_imports(file_path, broken_imports):
    with open(file_path, 'r') as file:
        content = file.read()

    for imp in broken_imports:
        if 'ui.' in imp:  # Focus only on 'ui' imports
            possible_paths = [f for f in ui_files if imp.split('.')[-1] in f]

            if possible_paths:
                possible_paths.sort(key=lambda x: x.count('/'))  # Closest match
                corrected_import = possible_paths[0].replace(project_root + '/', '').replace('/', '.').replace('.kt', '')
                content = re.sub(rf'import\s+{imp}', f'import {corrected_import}', content)

    with open(file_path, 'w') as file:
        file.write(content)

# Run the fixing process
broken_imports = find_broken_imports()
for file_path, imports in broken_imports.items():
    fix_ui_imports(file_path, imports)

print("UI import fixing completed. Please check your project files.")

////////////////////////////////////////////////////////////////////////////////////////

├── network
│   ├── ApiClient.kt

////////////////////////////////////////////////////////////////////////////////////////
// Location: network/ApiClient.kt
package com.example.mealflow.network

import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.json.Json

/**
 * Singleton object that provides a shared HTTP client for all API requests.
 * This ensures consistent configuration and efficient resource usage.
 */
object ApiClient {
    // Base URL for all API endpoints
    const val BASE_URL = "https://mealflow.ddns.net/api/v1"

    // Shared HTTP client instance
    val client = HttpClient(CIO) {
        install(ContentNegotiation) {
            json(Json {
                ignoreUnknownKeys = true
                // Add any other JSON configuration here
            })
        }

        // You can add additional client configurations here as needed:
        // - Timeout settings
        // - Logging
        // - Error handling
        // - Authentication interceptors
    }

    // API endpoint paths
    object Endpoints {
        const val LOGIN = "$BASE_URL/users/login"
        const val REGISTER = "$BASE_URL/users/register"
        const val VERIFY_EMAIL = "$BASE_URL/users/verify-email"
        const val FORGOT_PASSWORD = "$BASE_URL/users/forgot-password"
        const val RESET_PASSWORD = "$BASE_URL/users/reset-password"

        // Meal endpoints
        const val RECOMMENDED_MEALS = "$BASE_URL/meal/recommended"
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiForgetPassword.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.network

import android.util.Log
import androidx.navigation.NavController
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.http.isSuccess
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable

@Serializable
data class ForgetPasswordRequest(val email: String)

@Serializable
data class ForgetPasswordResponse(val success: Boolean, val message: String, val data: PasswordData? = null)

@Serializable
data class PasswordData(
    val token: String,
)

fun forgetPasswordApi(email: String, navController: NavController, viewModel: ForgetPasswordViewModel) {
    CoroutineScope(Dispatchers.IO).launch {
        try {
            Log.d("API", "📩 إرسال الطلب: email=$email")

            val response: HttpResponse = ApiClient.client.post(ApiClient.Endpoints.FORGOT_PASSWORD) {
                contentType(ContentType.Application.Json)
                setBody(ForgetPasswordRequest(email))
            }

            if (response.status.isSuccess()) {
                val responseBody = response.body<ForgetPasswordResponse>()

                withContext(Dispatchers.Main) {
                    if (responseBody.success) {
                        Log.d("API", "✅ تسجيل دخول ناجح، الانتقال إلى الصفحة التالية")
                        navController.navigate("Reset Password Page")
                    } else {
                        Log.e("API", "❌ فشل تسجيل الدخول: ${responseBody.message}")
                    }
                }
            } else {
                val errorText = response.bodyAsText()
                Log.e("API", "⚠️ خطأ من السيرفر (${response.status}): $errorText")
            }
        } catch (e: Exception) {
            Log.e("API", "❌ استثناء أثناء تنفيذ الطلب: ${e.localizedMessage}")
        }
        // No need to close the client as it's shared
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiLogin.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.network

import android.util.Log
import androidx.navigation.NavController
import com.example.mealflow.viewModel.LoginViewModel
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.http.isSuccess
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable

// ----------------------- LoginRequest ---------------------------
@Serializable
data class LoginRequest(val email: String, val password: String)

// ----------------------- LoginResponse ---------------------------
@Serializable
data class LoginResponse(val success: Boolean, val message: String, val data: Data? = null)

@Serializable
data class Data(
    val accessToken: String,
    val refreshToken: String,
    val user: ApiUser
)

@Serializable
data class ApiUser(
    val id: String,
    val email: String,
    val isVerified: Boolean
)

suspend fun loginApi(email: String, password: String, navController: NavController, viewModel: LoginViewModel) {
    try {
        Log.d("API", "📩 Sending request: email=$email, password=$password")

        val response: HttpResponse = ApiClient.client.post(ApiClient.Endpoints.LOGIN) {
            contentType(ContentType.Application.Json)
            setBody(LoginRequest(email, password))
        }

        if (response.status.isSuccess()) {
            val responseBody = response.body<LoginResponse>()

            withContext(Dispatchers.Main) {
                viewModel.setLoginMessage(responseBody.message)

                if (responseBody.success) {
                    Log.d("API", "✅ Login successful, navigating to Home Screen")

                    // Instead of directly navigating, trigger the navigation through ViewModel
                    viewModel.navigateToHomeScreen()
                } else {
                    Log.e("API", "❌ Login failed: ${responseBody.message}")
                }
            }
        } else {
            val errorText = response.bodyAsText()
            Log.e("API", "⚠️ Server error (${response.status}): $errorText")

            withContext(Dispatchers.Main) {
                viewModel.setLoginMessage("Login failed: Server error (${response.status})")
            }
        }
    } catch (e: Exception) {
        Log.e("API", "❌ Exception while executing request: ${e.localizedMessage}")

        withContext(Dispatchers.Main) {
            viewModel.setLoginMessage("Login failed: ${e.localizedMessage}")
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiMeal.kt

////////////////////////////////////////////////////////////////////////////////////////
// Location: network/ApiMeal.kt
package com.example.mealflow.network

import com.example.mealflow.data.model.MealResponse
import io.ktor.client.call.body
import io.ktor.client.request.get
import io.ktor.http.isSuccess

class ApiMeal {
    private val client = ApiClient.client

    suspend fun getRecommendedMeals(): Result<MealResponse> {
        return try {
            val response = client.get(ApiClient.Endpoints.RECOMMENDED_MEALS)

            if (response.status.isSuccess()) {
                Result.success(response.body())
            } else {
                Result.failure(Exception("API error: ${response.status.value} - ${response.status.description}"))
            }
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiRegister.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.network

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.navigation.NavController
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.http.contentType
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json

@Serializable
data class RegisterRequest(val username: String, val email: String, val password: String)

@Serializable
data class RegisterResponse(val success: Boolean, val message: String)

fun registerUser(
    context: Context,
    username: String,
    email: String,
    password: String,
    navController: NavController,
    onError: (String) -> Unit
) {
    CoroutineScope(Dispatchers.IO).launch {
        try {
            val response: HttpResponse = ApiClient.client.post(ApiClient.Endpoints.REGISTER) {
                contentType(ContentType.Application.Json)
                setBody(RegisterRequest(username, email, password))
            }

            val responseBodyText = response.bodyAsText()
            val message = try {
                Json.decodeFromString<RegisterResponse>(responseBodyText).message
            } catch (e: Exception) {
                Regex("\"message\"\\s*:\\s*\"(.*?)\"").find(responseBodyText)?.groupValues?.get(1)
                    ?: "حدث خطأ غير معروف"
            }

            Log.d("RegisterUser", "Response Status: ${response.status}")
            Log.d("RegisterUser", "Message: $message")

            withContext(Dispatchers.Main) {
                if (response.status == HttpStatusCode.OK) {
                    Log.d("RegisterUser", "✅ تسجيل ناجح: التنقل إلى OtpPage")
                    navController.navigate("OtpPage") {
                        popUpTo("register") { inclusive = true }
                        launchSingleTop = true
                    }
                }
                else if(message == "User account created successfully. Please check your email for the verification code.")
                {
                    Log.d("RegisterUser", "✅ تسجيل ناجح: التنقل إلى OtpPage")
                    navController.navigate("Otp Page") {
                        popUpTo("Register Page") { inclusive = true }
                        launchSingleTop = true
                    }
                }
                else {
                    Log.e("RegisterUser", "❌ تسجيل فشل: $message")
                    onError(message)
                }
            }
        } catch (e: Exception) {
            withContext(Dispatchers.Main) {
                val errorMessage = "حدث خطأ أثناء التسجيل: ${e.message}"
                Log.e("RegisterUser", "❌ خطأ استثنائي: $errorMessage", e)
                onError(errorMessage)
                Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
            }
        }
        // No need to close the client as it's shared
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiResetPassword.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.network

import android.util.Log
import androidx.navigation.NavController
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.http.isSuccess
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable

@Serializable
data class ResetPasswordRequest(val token: String, val password: String)

@Serializable
data class ResetPasswordResponse(val success: Boolean, val error: String, val message: String, val details: ResetData? = null)

@Serializable
data class ResetData(
    val token: String,
)
fun ResetPasswordApi(token: String, password: String, navController: NavController, viewModel: ForgetPasswordViewModel) {
    // Set loading state
    viewModel.setLoading(true)
    viewModel.setErrorMessage("") // Clear any previous errors

    CoroutineScope(Dispatchers.IO).launch {
        try {
            Log.d("API", "📩 Sending request: token=$token")
            // Don't log the actual password in production
            Log.d("API", "📩 Sending request with password")

            val response: HttpResponse = ApiClient.client.post(ApiClient.Endpoints.RESET_PASSWORD) {
                contentType(ContentType.Application.Json)
                setBody(ResetPasswordRequest(token, password))
            }

            withContext(Dispatchers.Main) {
                viewModel.setLoading(false)

                if (response.status.isSuccess()) {
                    val responseBody = response.body<ResetPasswordResponse>()

                    if (responseBody.success) {
                        Log.d("API", "Password reset successful ✅")
                        // Navigate to the home screen
                        // Use the actual route name from your Navigation Graph
                        navController.navigate("Home Page") {
                            // Clear the back stack so user can't go back to reset page
                            popUpTo(0) { inclusive = true }
                        }

                    } else {
                        Log.e("API", "Reset failed ❌\n${responseBody.message}")
                        viewModel.setErrorMessage(responseBody.message)
                    }
                } else {
                    val errorText = response.bodyAsText()
                    Log.e("API", "Server error ⚠️\n${response.status}\n $errorText")
                    viewModel.setErrorMessage("Server error. Please try again later.")
                }
            }
        } catch (e: Exception) {
            withContext(Dispatchers.Main) {
                viewModel.setLoading(false)
                Log.e("API", "Exception occurred ❌\n${e.localizedMessage}")
                viewModel.setErrorMessage("Connection error. Please check your internet connection.")
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ApiVerifyEmail.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.network

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.navigation.NavController
import io.ktor.client.request.accept
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.http.contentType
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json

@Serializable
data class OtpRequest(val otp: String, val email: String)

@Serializable
data class OtpResponse(val success: Boolean, val message: String, val data: AuthData? = null)

@Serializable
data class AuthData(
    val accessToken: String,
    val refreshToken: String,
    val user: User
)

@Serializable
data class User(
    val id: String,
    val email: String,
    val isVerified: Boolean
)

fun verifyEmail(context: Context, otp: String, email: String, navController: NavController) {
    CoroutineScope(Dispatchers.IO).launch {
        try {
            Log.d("API", "🔹 إرسال طلب التحقق: ${ApiClient.Endpoints.VERIFY_EMAIL}")
            Log.d("API", "📩 بيانات الطلب: otp=$otp, email=$email")

            val response: HttpResponse = ApiClient.client.post(ApiClient.Endpoints.VERIFY_EMAIL) {
                contentType(ContentType.Application.Json)
                accept(ContentType.Application.Json)
                setBody(OtpRequest(otp, email))
            }

            val responseText = response.bodyAsText()
            Log.d("API", "🔹 استجابة الخادم: $responseText")
            
            withContext(Dispatchers.Main) {
                if (response.status == HttpStatusCode.OK || response.status == HttpStatusCode.Accepted) {
                    val responseBody = Json.decodeFromString<OtpResponse>(responseText)
                    if (responseBody.success) {
                        Log.d("API", "✅ التحقق ناجح! الانتقال إلى الصفحة التالية")
                        navController.navigate("Test Page")
                    } else {
                        Toast.makeText(context, responseBody.message, Toast.LENGTH_LONG).show()
                        Log.e("API", "❌ خطأ في التحقق: ${responseBody.message}")
                    }
                } else {
                    Log.e("API", "⚠️ استجابة غير متوقعة: ${response.status}")
                }
            }
        } catch (e: Exception) {
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "فشل التحقق: ${e.message}", Toast.LENGTH_LONG).show()
                Log.e("API", "❌ استثناء أثناء تنفيذ الطلب: ${e.message}")
            }
        }
        // No need to close the client as it's shared
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── random
│   ├── Divider.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.random

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Divider
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@Composable
fun OrDivider(textDivider:String) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Divider(
            modifier = Modifier.weight(1f),
            thickness = 1.dp,
            color = Color.Black
        )
        Text(
            text = textDivider,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(horizontal = 20.dp),
            color = Color.Black.copy(alpha = 0.7f)
        )
        Divider(
            modifier = Modifier.weight(1f),
            thickness = 1.dp,
            color = Color.Black
        )
    }

}
// Function to put text between line
@Preview(showBackground = true)
@Composable
fun PreviewOrDivider() {
    OrDivider("Test")
}


////////////////////////////////////////////////////////////////////////////////////////

│   ├── Icons.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.random

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.rounded.Home
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.mealflow.R

//--------------
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun RowLoginIcons() {
    Row(
        horizontalArrangement = Arrangement.Center,
        modifier = Modifier
            .padding(20.dp)
            .fillMaxWidth()
    ) {
        IconButton(
            onClick = {/*TODO*/ },
            modifier = Modifier
                .padding(10.dp)
                .size(44.dp)  // تحديد الحجم الدائري
                .border(1.dp, Color.Black, CircleShape)// حدود سوداء
        ) {
            Icon(
                painter = painterResource(id = R.drawable.google_icon_icons_com_62736),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier.size(30.dp)
            )
        }
        IconButton(
            onClick = {/*TODO*/ },
            modifier = Modifier
                .padding(10.dp)
                .size(44.dp)  // تحديد الحجم الدائري
                .border(1.dp, Color.Black, CircleShape)// حدود سوداء
        ) {
            Icon(
                painter = painterResource(id = R.drawable.facebook_logo_icon),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier.size(30.dp)
            )
        }
        IconButton(
            onClick = {/*TODO*/ },
            modifier = Modifier
                .padding(10.dp)
                .size(44.dp)  // تحديد الحجم الدائري
                .border(1.dp, Color.Black, CircleShape)// حدود سوداء
        ) {
            Icon(
                painter = painterResource(id = R.drawable.apple_logo_icon),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier.size(30.dp)
            )
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun ViewRowLoginIcons() {
    RowLoginIcons()
}
@Composable
fun IconWithClickable(painter: Painter, onClick: () -> Unit, modifier: Modifier = Modifier) {
    Icon(
        painter = painter,
        contentDescription = "أيقونة مخصصة",
        tint = Color.Black, // لإبقاء ألوان الصورة الأصلية
        modifier = modifier
            .size(40.dp)
            .clickable { onClick() }
            .padding(10.dp)
    )
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun ViewLoginIcons() {
    IconWithClickable(
        painter = painterResource(id = R.drawable.community_icon), // استبدل باسم الأيقونة الفعلي
        onClick = { println("Icon Clicked!") },
        modifier = Modifier.padding(20.dp)
    )
}

@Composable
fun BottomBar(modifier: Modifier = Modifier)
{
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.LightGray)
            .drawBehind {
                drawLine(
                    color = Color.Black, // لون الحد
                    start = Offset(0f, 0f), // بداية الخط (أعلى يسار)
                    end = Offset(size.width, 0f), // نهاية الخط (أعلى يمين)
                    strokeWidth = 4.dp.toPx() // سمك الحد
                )
            }, // إضافة لون خلفية لاختبار التصميم
        horizontalArrangement = Arrangement.SpaceEvenly // توزيع الأيقونات بالتساوي
    ) {
        IconWithClickable(painter = painterResource(id = R.drawable.home_icon), onClick = {},
            modifier = Modifier.weight(1f))
        IconWithClickable(painter = painterResource(id = R.drawable.market_icon), onClick = {},
            modifier = Modifier.weight(1f))
        IconWithClickable(painter = painterResource(id = R.drawable.search_zoom), onClick = {},
            modifier = Modifier.weight(1f))
        IconWithClickable(painter = painterResource(id = R.drawable.community_icon), onClick = {},
            modifier = Modifier.weight(1f))
        IconWithClickable(painter = painterResource(id = R.drawable.planner_icon), onClick = {},
            modifier = Modifier.weight(1f))
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun BottomBarPreview() {
    Box{
        Row(verticalAlignment = Alignment.Bottom)
        {
            BottomBar()
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── Input.kt

////////////////////////////////////////////////////////////////////////////////////////
//package com.example.mealflow.random
//
//import androidx.compose.foundation.clickable
//import androidx.compose.foundation.layout.Column
//import androidx.compose.foundation.layout.fillMaxWidth
//import androidx.compose.foundation.layout.padding
//import androidx.compose.foundation.layout.size
//import androidx.compose.foundation.text.KeyboardOptions
//import androidx.compose.material3.Icon
//import androidx.compose.material3.OutlinedTextField
//import androidx.compose.material3.Text
//import androidx.compose.runtime.Composable
//import androidx.compose.runtime.getValue
//import androidx.compose.runtime.mutableStateOf
//import androidx.compose.runtime.remember
//import androidx.compose.runtime.setValue
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.res.painterResource
//import androidx.compose.ui.text.TextStyle
//import androidx.compose.ui.text.input.KeyboardType
//import androidx.compose.ui.text.input.PasswordVisualTransformation
//import androidx.compose.ui.text.input.VisualTransformation
//import androidx.compose.ui.tooling.preview.Preview
//import androidx.compose.ui.unit.dp
//import com.example.mealflow.R
//
//@Composable
//fun registerInput():Triple<String, String, String>
//{
//    var username by remember { mutableStateOf("") }
//    var email by remember { mutableStateOf("") }
//    var password by remember { mutableStateOf("") }
//    var repassword by remember { mutableStateOf("") }
//    var passwordVisible by remember { mutableStateOf(false) }
//    OutlinedTextField(
//        value = username,
//        onValueChange = { newText -> username = newText },
//        label = { Text("Enter username") },
//        singleLine = true,
//        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(start = 20.dp, top = 20.dp, end = 20.dp)
//    )
//    // Input field
//    OutlinedTextField(
//        value = email,
//        onValueChange = { newText -> email = newText },
//        label = { Text("Add an Email") },
//        singleLine = true,
//        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(start = 20.dp, top = 20.dp, end = 20.dp)
//    )
//    // حقل كلمة السر
//    OutlinedTextField(
//        value = password,
//        onValueChange = { newPassword -> password = newPassword },
//        label = { Text("Enter your password") },
//        trailingIcon = {
//            Icon(
//                painter = painterResource(
//                    id = if (passwordVisible) {
//                        R.drawable.eye_view_icon
//                    } else {
//                        R.drawable.eye_closed_icon
//                    }
//                ),
//                contentDescription = null,
//                tint = Color.Gray,
//                modifier = Modifier
//                    .size(28.dp)
//                    .clickable { passwordVisible = !passwordVisible }
//            )
//        },
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(start = 20.dp, top = 20.dp, end = 20.dp),
//        singleLine = true,
//        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
//        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
//        keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
//    )
//    // حقل كلمة السر
//    OutlinedTextField(
//        value = repassword,
//        onValueChange = { newPassword -> repassword = newPassword },
//        label = { Text("Re-Enter your password") },
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(start = 20.dp, top = 20.dp, end = 20.dp),
//        singleLine = true,
//        textStyle = TextStyle(color = Color.Black), // تحديد لون النص
//        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
//        keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
//    )
//    return Triple(username,email,password)
//}
////----------------------------------------------------------
//@Preview(showBackground = true, showSystemUi = true)
//@Composable
//fun PreviewRegisterInput()
//{
//    Column {
//        registerInput()
//    }
//}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── Showpopup.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.random

import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import com.example.mealflow.viewModel.RegisterViewModel


@Composable
fun ErrorPopupRegister(viewModel: RegisterViewModel) {
    val showErrorPopup by viewModel.showErrorPopup.observeAsState(false)
    val errorMessage by viewModel.errorMessage.observeAsState(null)

    if (showErrorPopup) {
        AlertDialog(
            onDismissRequest = { viewModel.dismissErrorPopup() },
            title = { Text(text = "Error") },
            text = { Text(text = errorMessage ?: "Unknown error occurred") },
            confirmButton = {
                Button(onClick = { viewModel.dismissErrorPopup() }) {
                    Text("OK")
                }
            }
        )
    }
}

@Composable
fun InputPopupDialog(
    onDismiss: () -> Unit,
    onConfirm: () -> Unit,
    initialText: String = ""
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("Registration error") },
        text = { Text(text = initialText) },
        confirmButton = {
            Button(onClick = onConfirm) {
                Text(text = "OK")
            }
        }
    )
}

////////////////////////////////////////////////////////////////////////////////////////

├── ui
│   ├── components
│   │   ├── MealItem.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.data.model.Meal
import com.example.mealflow.R
import androidx.compose.ui.res.painterResource
@Composable
fun MealItem(meal: Meal, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(4.dp)
            .clickable(onClick = onClick),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(modifier = Modifier.fillMaxWidth()) {
            // Display meal image with safe handling
            AsyncImage(
                model = meal.imageUrl.takeIf { meal.imageUrl.isNotBlank() } ?: R.drawable.android_robot,
                contentDescription = meal.name,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                contentScale = ContentScale.Crop,
                placeholder = painterResource(id = R.drawable.android_robot),
                error = painterResource(id = R.drawable.android_robot)
            )

            Column(modifier = Modifier.fillMaxWidth().padding(12.dp)) {
                // Safely display meal name
                Text(
                    text = meal.name.takeIf { meal.name.isNotBlank() } ?: "Unnamed Meal",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Safely display meal description
                Text(
                    text = meal.description.takeIf { meal.description.isNotBlank() } ?: "No description available",
                    style = MaterialTheme.typography.bodyMedium,
                    maxLines = 3,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Display tags and rating if available
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    meal.tags.firstOrNull()?.let {
                        Text(
                            text = it,
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    Text(
                        text = "Rating: ${meal.rating}",
                        style = MaterialTheme.typography.bodySmall
                    )
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////

│   ├── navigation
│   │   ├── AppNavigation.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.navigation

import android.annotation.SuppressLint
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.example.mealflow.data.model.Meal
import com.example.mealflow.ui.screens.CommunityPage
import com.example.mealflow.ui.screens.GroceriesPage
import com.example.mealflow.ui.screens.MealDetailScreen
import com.example.mealflow.ui.screens.SearchPage
import com.example.mealflow.ui.screens.HomePage
import com.example.mealflow.ui.screens.PlannerPage
import com.example.mealflow.viewModel.MealViewModel

@SuppressLint("StateFlowValueCalledInComposition")
@Composable
fun AppNavigation(
    navController: NavHostController,
    viewModel: MealViewModel
) {
    NavHost(
        navController = navController,
        startDestination = Screen.HomeScreen.route
    ) {
        composable(Screen.HomeScreen.route) {
            HomePage(
                meals = viewModel.meals.value,
                onMealClick = { meal ->
                    navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
                    navController.navigate(Screen.MealDetailScreen.route)
                },
                viewModel = viewModel
            )
        }

        composable(Screen.SearchScreen.route) {
            SearchPage(
                viewModel = viewModel,
                onMealClick = { meal ->
                    navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
                    navController.navigate(Screen.MealDetailScreen.route)
                },
                navController = navController,
                meals = viewModel.meals.value
            )
        }

        composable(Screen.PlannerScreen.route) {
            PlannerPage(navController)
        }

        composable(Screen.CommunityScreen.route) {
            CommunityPage(navController)
        }

        composable(Screen.GroceriesScreen.route) {
            GroceriesPage(navController)
        }

        composable(Screen.MealDetailScreen.route) {
            val meal = navController.previousBackStackEntry
                ?.savedStateHandle
                ?.get<Meal>("meal")

            if (meal != null) {
                MealDetailScreen(
                    meal = meal,
                    onNavigateBack = {
                        navController.popBackStack()
                    }
                )
            }
        }
    }
}

sealed class Screen(val route: String) {
    object HomeScreen : Screen("Home Page")
    object SearchScreen : Screen("Search Page")
    object MealDetailScreen : Screen("Meal Details Page")
    object CommunityScreen : Screen("Community Page")
    object GroceriesScreen : Screen("Groceries Page")
    object PlannerScreen : Screen("Planner Page")
}

class NavigationActions(private val navController: NavHostController) {
    fun navigateToHome() {
        navController.navigate(Screen.HomeScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToSearch() {
        navController.navigate(Screen.SearchScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToCommunity() {
        navController.navigate(Screen.CommunityScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToGroceries() {
        navController.navigate(Screen.GroceriesScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToPlanner() {
        navController.navigate(Screen.PlannerScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToMealDetail(meal: Meal) {
        navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
        navController.navigate(Screen.MealDetailScreen.route)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── screens
│   │   ├── CommunityPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController

@Composable
fun CommunityPage(navController: NavHostController) {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Community", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── ForgetPasswordPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import android.util.Log
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import com.example.mealflow.ui.theme.Red
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.BackButton
import com.example.mealflow.network.ForgetPasswordRequest
import com.example.mealflow.network.forgetPasswordApi
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import com.example.mealflow.viewModel.LoginViewModel


// ----------------------- Forget Password Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ForgetPasswordPage(navController: NavController,viewModel: ForgetPasswordViewModel = viewModel())
{
    // ----------------------- Variables ---------------------------
    val email by viewModel.email.observeAsState("")
    val emailError = Validator.validateEmail(email)
    var isFocusedEmail by remember { mutableStateOf(false) }

        Column {
            // ----------------------- Back Button ---------------------------
            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(top = 20.dp), horizontalArrangement = Arrangement.Start) {
                BackButton(onClick = {
                    navController.navigate("Home Page")
                })
            }
            // ----------------------- Forgotten Password Text -----------------------------
            Text(
                text = stringResource(id = R.string.ForgottenPassword),
                Modifier.padding(10.dp),
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold
            )
            // ----------------------- InputFields ---------------------------
            // ---------------------------------------------------------------
            // Input field ------------------ Email -----------------------
            OutlinedTextField(
                value = email,
                onValueChange = { viewModel.updateEmail(it) },
                label = { Text(stringResource(id = R.string.EnterEmail)) },
                singleLine = true,
                textStyle = TextStyle(color = Color.Black),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,  // لون الحدود عند التركيز
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 20.dp, end = 20.dp)
                    .onFocusChanged { isFocusedEmail = it.isFocused }
            )
            // Text ------------------ Email Error -----------------------
            if (isFocusedEmail && emailError != null) {
                Text(
                    text = emailError,
                    modifier = Modifier
                        .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                    color = Color.Red,
                    fontSize = 12.sp
                )
            }
            //-----------------------------------------------------------------------------------------------------
            //-----------------------------------------------------------------------------------------------------
            // Button ------------------ Reset your Password -------------------------------------------------------------------
            Button(
                onClick = {
                    if(emailError == null)
                    {
                        forgetPasswordApi(email,navController,viewModel)
                    }
                },
                Modifier
                    .padding(start = 20.dp, end = 20.dp, top = 20.dp)
                    .align(alignment = Alignment.CenterHorizontally)
                    .fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
            ) {
                Text(
                    text = stringResource(id = R.string.ResetPassword),
                    color = Color.White
                )
            }
        }
}

//------------------------------------------------------------------
//------------------------------------------------------------------
@Preview(showSystemUi = true, showBackground = true)
@Composable
fun ForgetPasswordPagePreview()
{
    ForgetPasswordPage(navController = rememberNavController())
}
//---------------------------------------------------------------
//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── GroceriesPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController

@Composable
fun GroceriesPage(navController: NavHostController) {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Groceries", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── HomePage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import com.example.mealflow.R
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Snackbar
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.data.model.Meal
import com.example.mealflow.viewModel.MealViewModel
import java.util.Calendar
import androidx.compose.runtime.DisposableEffect
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver

@Composable
fun HomePage(
    meals: List<Meal>,
    userName: String = "User",
    onMealClick: (Meal) -> Unit,
    viewModel: MealViewModel? = null // Added viewModel parameter
) {
    // Get current hour to determine greeting
    val calendar = Calendar.getInstance()
    val hourOfDay = calendar.get(Calendar.HOUR_OF_DAY)

    val greeting = when {
        hourOfDay < 12 -> "Good Morning"
        hourOfDay < 17 -> "Good Afternoon"
        else -> "Good Evening"
    }

    // Observe view model states if available
    val isLoading by viewModel?.isLoading?.collectAsState(false) ?: remember { mutableStateOf(false) }
    val errorMessage by viewModel?.errorMessage?.collectAsState(null) ?: remember { mutableStateOf<String?>(null) }

    // State to track whether an error was already shown
    var errorShown by remember { mutableStateOf(false) }

    // Lifecycle observer to refresh data when screen becomes active
    val lifecycleOwner = LocalLifecycleOwner.current
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_RESUME) {
                // Refresh data when screen becomes active
                viewModel?.fetchRecommendedMeals()
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)

        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // Improved greeting header with user name
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = "$greeting,",
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    Text(
                        text = userName,
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )
                }

                // Add refresh button
                if (viewModel != null) {
                    IconButton(onClick = { viewModel.refreshMeals() }) {
                        Icon(
                            imageVector = Icons.Default.Refresh,
                            contentDescription = "Refresh",
                            modifier = Modifier.size(24.dp)
                        )
                    }
                }
            }

            // Loading indicator for initial load
            if (isLoading && meals.isEmpty()) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                }
            } else {
                // Section 1: Planned
                SectionHeader("Planned")
                if (meals.isNotEmpty()) {
                    MealRowImproved(meals = meals.take(minOf(5, meals.size)), onMealClick = onMealClick)
                } else {
                    EmptyStateMessage("No planned meals available")
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Section 2: Recommended
                SectionHeader("Recommended")
                if (meals.isNotEmpty()) {
                    MealRowImproved(meals = meals.take(minOf(5, meals.size)), onMealClick = onMealClick)
                } else {
                    EmptyStateMessage("No recommendations available")
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Section 3: Community's Popular
                SectionHeader("Community's Popular")
                if (meals.isNotEmpty()) {
                    MealRowImproved(meals = meals.take(minOf(5, meals.size)), onMealClick = onMealClick)
                } else {
                    EmptyStateMessage("No popular meals available")
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Section 4: You May Like
                SectionHeader("You May Like")
                if (meals.isNotEmpty()) {
                    MealRowImproved(meals = meals.take(minOf(5, meals.size)), onMealClick = onMealClick)
                } else {
                    EmptyStateMessage("No suggestions available")
                }
            }

            // Add bottom space for better scrolling experience
            Spacer(modifier = Modifier.height(16.dp))
        }

        // Show error message as a snackbar at the bottom
        if (!errorMessage.isNullOrBlank() && !errorShown) {
            Snackbar(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(16.dp),
                action = {
                    TextButton(onClick = { errorShown = true }) {
                        Text("Dismiss")
                    }
                }
            ) {
                Text(errorMessage ?: "Unknown error occurred")
            }

            // Mark error as shown after a delay
            LaunchedEffect(errorMessage) {
                kotlinx.coroutines.delay(5000)
                errorShown = true
            }
        }

        // Overlay loading indicator for refresh operations
        if (isLoading && meals.isNotEmpty()) {
            Box(
                modifier = Modifier
                    .align(Alignment.TopEnd)
                    .padding(16.dp)
            ) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    strokeWidth = 2.dp
                )
            }
        }
    }
}

@Composable
fun SectionHeader(title: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 12.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onBackground
        )

        TextButton(onClick = { /* Handle see all click */ }) {
            Text(
                text = "See All",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.primary
            )
        }
    }
}

@Composable
fun EmptyStateMessage(message: String) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        color = MaterialTheme.colorScheme.surfaceVariant,
        shape = MaterialTheme.shapes.medium
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = message,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun MealRowImproved(
    meals: List<Meal>,
    onMealClick: (Meal) -> Unit
) {
    LazyRow(
        modifier = Modifier.fillMaxWidth(),
        contentPadding = PaddingValues(vertical = 8.dp),
        horizontalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        items(meals) { meal ->
            HomeMealCard(
                meal = meal,
                onClick = {
                    try {
                        onMealClick(meal)
                    } catch (e: Exception) {
                        // Log error but don't crash
                        android.util.Log.e(
                            "MealRowImproved",
                            "Error handling meal click for meal ID: ${meal.mealId}",
                            e
                        )
                    }
                }
            )
        }
    }
}

@Composable
fun HomeMealCard(
    meal: Meal,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .width(160.dp)
            .height(220.dp),
        shape = MaterialTheme.shapes.medium,
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        onClick = onClick
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // Image takes about 60% of card height
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(130.dp)
            ) {
                // Properly load the meal image with AsyncImage
                AsyncImage(
                    model = meal.imageUrl,
                    contentDescription = meal.name,
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize(),
                    placeholder = painterResource(id = R.drawable.android_robot),
                    error = painterResource(id = R.drawable.android_robot)
                )
            }

            // Content section takes remaining space
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp)
            ) {
                // Meal name
                Text(
                    text = meal.name,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Brief description or category
                Text(
                    text = meal.description,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Rating or cooking time
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Display the first tag or default text
                    Text(
                        text = meal.tags.firstOrNull() ?: "Meal",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── LoginPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens


import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.LoginViewModel

// ----------------------- Login Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginPage(navController: NavController, viewModel: LoginViewModel = viewModel()) {
    // ----------------------- Variables ---------------------------
    val email by viewModel.email.observeAsState("")
    val password by viewModel.password.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val emailError = Validator.validateEmail(email)
    val passwordError = Validator.validatePassword(password)
    var isFocusedEmail by remember { mutableStateOf(false) }
    var isFocusedPassword by remember { mutableStateOf(false) }

    // Observe loading state for login
    val isLoading by viewModel.isLoading.observeAsState(false)

    // Observe login message for errors
    val loginMessage by viewModel.loginMessage.observeAsState("")

    // Observe navigation to home screen
    val navigateToHome by viewModel.navigateToHome.observeAsState(false)

    // Navigate to home screen when navigateToHome is true
    LaunchedEffect(navigateToHome) {
        if (navigateToHome) {
            navController.navigate("Home Page") {
                // Pop up to the start destination to clear the back stack
                popUpTo("Start Page") {
                    inclusive = true
                }
                // Avoid multiple copies of the same destination
                launchSingleTop = true
            }
            viewModel.onHomeNavigationComplete()
        }
    }

    Column {
        // ----------------------- Skip Button ---------------------------
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {
            Text(text = stringResource(id = R.string.Skip),
                Modifier
                    .clickable {
                        navController.navigate("Home Page") {
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                            launchSingleTop = true
                            restoreState = true
                        }
                    }
                    .padding(20.dp),
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Gray
            )
        }
        // ----------------------- Join Text -----------------------------
        Text(
            text = stringResource(id = R.string.Welcome_back),
            Modifier.padding(start = 20.dp, top = 40.dp ,end = 20.dp),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold
        )
        // ----------------------- InputFields ---------------------------
        // ---------------------------------------------------------------
        // Input field ------------------ Email -----------------------
        OutlinedTextField(
            value = email,
            onValueChange = { viewModel.updateEmail(it) },
            label = { Text(stringResource(id = R.string.EnterEmail)) },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,  // Color of border when focused
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedEmail = it.isFocused }
        )
        // Text ------------------ Email Error -----------------------
        if (isFocusedEmail && emailError != null)
        {
            Text(
                text = emailError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }
        // Input field ------------------ Password -----------------------
        OutlinedTextField(
            value = password,
            onValueChange = { viewModel.updatePassword(it) },
            label = { Text(stringResource(id = R.string.EnterPassword)) },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,  // Color of border when focused
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedPassword = it.isFocused },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )
        // Text ------------------ Password Error -----------------------
        if (isFocusedPassword && passwordError != null)
        {
            Text(
                text = passwordError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Display login error message if any
        if (loginMessage.isNotEmpty()) {
            Text(
                text = loginMessage,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 14.sp
            )
        }

        // ----------------------- Forget Password Button ---------------------------
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {
            Text(text = stringResource(id = R.string.ForgotPassword),
                Modifier
                    .clickable { navController.navigate("Forget Password Page") }
                    .padding(end = 25.dp),
                fontWeight = FontWeight.Bold,
                color = Color.Red
            )
        }
        //-----------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------
        // Button ------------------ Log in -------------------------------------------------------------------
        Button(
            onClick = {
                viewModel.setLoginMessage("") // Clear any previous error message
                viewModel.loginButton(email, password, navController)
            },
            Modifier
                .padding(20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
            enabled = !isLoading // Disable button during loading
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = Color.White,
                    strokeWidth = 2.dp
                )
            } else {
                Text(
                    text = stringResource(id = R.string.Login),
                    color = Color.White
                )
            }
        }
        // ----------------------- Button to go to the Register page -----------------------
        Row(
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Text(text = stringResource(id = R.string.DoNot_Account))
            Text(text = stringResource(id = R.string.Register),
                Modifier
                    .clickable(onClick = {navController.navigate("Register Page")}
                    ),
                color = Color.Blue
            )
        }
        // ----------------------- Line with text in the middle ---------------------------
        OrDivider("OR")
        // ----------------------- Button to sign in with google ---------------------------
        Button(
            onClick = { /*TODO*/ } ,
            Modifier
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)

        ) {
            Icon(painter = painterResource(
                id = R.drawable.google_icon_icons_com_62736),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier
                    .size(24.dp)
                    .padding(end = 10.dp))
            Text(
                text = "Sign up using Google",
                color = Color.White
            )
        }
    }
}

@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewLoginPage()
{
    LoginPage(navController = rememberNavController())
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── MealDetailsPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SuggestionChip
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.R
import com.example.mealflow.data.model.Meal

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MealDetailScreen(meal: Meal, onNavigateBack: () -> Unit) {
    val scrollState = rememberScrollState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(meal.name) },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .verticalScroll(scrollState)
        ) {
            // Header section
            AsyncImage(
                model = meal.imageUrl,
                contentDescription = meal.name,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                contentScale = ContentScale.Crop,
                placeholder = painterResource(id = R.drawable.android_robot), // Placeholder image
                error = painterResource(id = R.drawable.android_robot) // Error image
            )


            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = meal.name,
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                meal.tags.forEach { tag ->
                    SuggestionChip(
                        onClick = { },
                        label = { Text(tag) }
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Description
            Text(
                text = meal.description,
                style = MaterialTheme.typography.bodyLarge
            )

            Spacer(modifier = Modifier.height(24.dp))

            // Cooking info
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Prep Time", fontWeight = FontWeight.Bold)
                        Text("${meal.preparationTime} min")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Cook Time", fontWeight = FontWeight.Bold)
                        Text("${meal.cookingTime} min")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Servings", fontWeight = FontWeight.Bold)
                        Text("${meal.servings}")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Calories", fontWeight = FontWeight.Bold)
                        Text("${meal.caloriesPerServing}")
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Ingredients
            Text(
                text = "Ingredients",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.ingredients.forEach { ingredient ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "• ${ingredient.quantity} ${ingredient.unit} ${ingredient.name}",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Instructions
            Text(
                text = "Instructions",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.instructions.forEachIndexed { index, instruction ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                ) {
                    Text(
                        text = "${index + 1}.",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.width(24.dp)
                    )
                    Text(
                        text = instruction,
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Cookware
            Text(
                text = "Cookware",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.cookware.forEach { item ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp)
                ) {
                    Text(
                        text = "• $item",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Creator info
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column {
                        Text("Created by", style = MaterialTheme.typography.bodySmall)
                        Text(meal.createdBy.username, fontWeight = FontWeight.Bold)
                    }

                    Row {
                        Text(
                            text = "Rating: ${meal.rating}",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "(${meal.reviewsCount} reviews)",
                            style = MaterialTheme.typography.bodySmall
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── OtpPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.DynamicButton
import com.example.mealflow.network.verifyEmail
import com.example.mealflow.viewModel.RegisterViewModel

// ----------------------- Otp Page ---------------------------
// ----------------------- Function to display text with otp input ---------------------------
@Composable
fun OtpPage(navController: NavController,viewModel: RegisterViewModel) {
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Column(verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally)
        {
            // ----------------------- Header Text -----------------------------
            Text(
                text = stringResource(id = R.string.HeaderOtp),
                fontWeight = FontWeight.Bold,
                fontSize = 24.sp
            )
            // ---------------- Function contains OTP input and verify email button (send OTP) -----------------
            OTPVerificationScreen(navController, viewModel)
        }
    }
}

// ----------------------- Function to preview OtpPage ---------------------------
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewOtpPage()
{
    val testViewModel: RegisterViewModel = viewModel()
    OtpPage(navController = rememberNavController(),testViewModel)
}

// ----------------------- Function to implement OTP input ---------------------------
@Composable
fun OTPInputField(
    otpLength: Int = 6,
    onOtpEntered: (String) -> Unit
) {
    // Single text field for OTP
    var otpValue by remember { mutableStateOf("") }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.fillMaxWidth()
    ) {
        OutlinedTextField(
            value = otpValue,
            onValueChange = { newValue ->
                // Only allow digits and limit to otpLength
                if (newValue.all { it.isDigit() } && newValue.length <= otpLength) {
                    otpValue = newValue

                    // Trigger callback when complete code is entered
                    if (newValue.length == otpLength) {
                        onOtpEntered(newValue)
                    }
                }
            },
            singleLine = true,
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number
            ),
            modifier = Modifier
                .height(55.dp)
                .fillMaxWidth()
                .padding(start = 20.dp, end = 20.dp),
            textStyle = TextStyle(
                fontSize = 18.sp,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            ),
            label = { Text("Enter verification code") },
            placeholder = { Text("123456") }
        )
    }
}

// Update the OTPVerificationScreen function to use the new OTPInputField
@Composable
fun OTPVerificationScreen(navController: NavController, viewModel: RegisterViewModel) {
    var otp by remember { mutableStateOf("") }
    val context = LocalContext.current
    val email by viewModel.email.observeAsState("")

    Column(
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = stringResource(id = R.string.check_email), fontSize = 20.sp)
        Spacer(modifier = Modifier.height(16.dp))

        // Single text field for OTP
        OTPInputField(onOtpEntered = { otp = it })

        Spacer(modifier = Modifier.height(16.dp))

        DynamicButton(
            onClick = {
                verifyEmail(context, otp, email, navController)
            },
            textOnButton = stringResource(id = R.string.Verification),
            buttonWidthDynamic = 200
        )
    }
}

////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── PlannerPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController

@Composable
fun PlannerPage(navController: NavHostController) {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Planner", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── RegisterPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.random.ErrorPopupRegister
import com.example.mealflow.random.InputPopupDialog
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.RegisterViewModel
import com.example.mealflow.network.registerUser


// ----------------------- Register Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterPage(navController: NavController, viewModel: RegisterViewModel)
{
    // ----------------------- Variables ---------------------------
    val username by viewModel.username.observeAsState("")
    val email by viewModel.email.observeAsState("")
    val password by viewModel.password.observeAsState("")
    val repassword by viewModel.repassword.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val context = LocalContext.current
    var showPopupError by remember { mutableStateOf(false) }
    val usernameError = Validator.validateUsername(username)
    val emailError = Validator.validateEmail(email)
    val passwordError = Validator.validatePassword(password)
    var isFocusedUsername by remember { mutableStateOf(false) }
    var isFocusedEmail by remember { mutableStateOf(false) }
    var isFocusedPassword by remember { mutableStateOf(false) }
    var showErrorPopup by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }

    Column {
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {

            // Fixed the Skip button navigation
            Text(
                text = "Skip",
                Modifier
                    .clickable {
                        navController.navigate("Home Page") {
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                            launchSingleTop = true
                            restoreState = true
                        }
                    }
                    .padding(20.dp),
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Gray
            )
        }
        // ----------------------- Join Text -----------------------------
        Text(
            text = stringResource(id = R.string.join),
            Modifier.padding(start = 20.dp, top = 40.dp ,end = 20.dp),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold
        )
        // ----------------------- InputFields ---------------------------
        // ---------------------------------------------------------------
        // Input field ------------------ UserName -----------------------
        OutlinedTextField(
            value = username,
            onValueChange = { viewModel.updateUsername(it) },
            label = { Text("Enter username") },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (usernameError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedUsername = it.isFocused }
        )
        // Text ------------------ Username Error -----------------------
        if (isFocusedUsername && usernameError != null)
        {
            Text(
                text = usernameError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Input field ------------------ Email -----------------------
        OutlinedTextField(
            value = email,
            onValueChange = { viewModel.updateEmail(it) },
            label = { Text("Add an Email") },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedEmail = it.isFocused }
        )
        // Text ------------------ Email Error -----------------------
        if (isFocusedEmail && emailError != null)
        {
            Text(
                text = emailError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }
        // Input field ------------------ Password -----------------------
        OutlinedTextField(
            value = password,
            onValueChange = { viewModel.updatePassword(it) },
            label = { Text("Enter your password") },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedPassword = it.isFocused },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )
        // Text ------------------ Password Error -----------------------
        if (isFocusedPassword && passwordError != null)
        {
            Text(
                text = passwordError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Button ------------------ Sign Up -----------------------
        Button(onClick = {
            if (viewModel.validateInputs(username, email, password)) {
                registerUser(context, username, email, password, navController, onError = { message ->
                    errorMessage = message
                    showErrorPopup = true
                })
            }
        } ,
            Modifier
                .padding(20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text(
                text = "Sign up",
                color = Color.White
            )
        }
        //----------------------- Button to go to the login page -----------------------
        Row(
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Text(text = "You already have an account? ")
            Text(text = "Login",
                Modifier
                    .clickable(onClick = {navController.navigate("Login Page")}
                    ),
                color = Color.Blue
            )
        }
        // ----------------------- Line with text in the middle ---------------------------
        OrDivider("OR")
        // ----------------------- Button to sign in with google ---------------------------
        Button(
            onClick = { /*TODO*/ } ,
            Modifier
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)

        ) {
            Icon(
                painter = painterResource(
                    id = R.drawable.google_icon_icons_com_62736
                ),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier
                    .size(24.dp)
                    .padding(end = 10.dp)
            )
            Text(
                text = "Sign up using Google",
                color = Color.White
            )
        }
        ErrorPopupRegister(viewModel = viewModel)
        if (showErrorPopup) {
            InputPopupDialog(
                onDismiss = { showErrorPopup = false },
                onConfirm = { showErrorPopup = false },
                initialText = errorMessage
            )
        }
    }
}

@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewRegisterPage()
{
    val registerViewModel: RegisterViewModel = viewModel()
    RegisterPage(navController = rememberNavController(),registerViewModel)
}
//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

//@Composable
//fun PreviewRegisterPage1()
//{
//    val usernameError = Validator.validateUsername("user_123")
//    val emailError = Validator.validateEmail("test@example.com")
//    val passwordError = Validator.validatePassword("Test@1234")
//    val otpError = Validator.validateOtp("123456")
//
//    if (usernameError != null) println(usernameError)
//    if (emailError != null) println(emailError)
//    if (passwordError != null) println(passwordError)
//    if (otpError != null) println(otpError)
//}

////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── ResetPasswordPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.BackButton
import com.example.mealflow.network.ResetPasswordApi
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import com.example.mealflow.viewModel.LoginViewModel


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ResetPasswordPage(navController: NavController, token: String?, viewModel: ForgetPasswordViewModel = viewModel()) {
    Log.d("ResetPasswordPage", "Received token: $token")

    // Store the token
    LaunchedEffect(token) {
        token?.let { viewModel.updateToken(it) }
    }

    val password by viewModel.password.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val repassword by viewModel.repassword.observeAsState("")
    val tokenValue by viewModel.token.observeAsState("")
    val isLoading by viewModel.isLoading.observeAsState(false)
    val errorMessage by viewModel.errorMessage.observeAsState("")

    val passwordError = Validator.validatePassword(password)
    var isFocusedPassword by remember { mutableStateOf(false) }

    // Determine if passwords match for validation
    val passwordsMatch = password == repassword && password.isNotEmpty()

    // Function to validate all inputs before API call
    val isFormValid = password.isNotEmpty() && passwordError == null && passwordsMatch

    Column {
        // ----------------------- Back Button ---------------------------
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.Start) {
            BackButton(onClick = {
                navController.popBackStack()
            })
        }

        Text(
            text = stringResource(id = R.string.ForgottenPassword),
            Modifier.padding(start = 20.dp, top = 80.dp, end = 20.dp),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold
        )

        //  ------------------ Password -----------------------
        OutlinedTextField(
            value = password,
            onValueChange = { viewModel.updatePassword(it) },
            label = { Text(stringResource(id = R.string.EnterPassword)) },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedPassword = it.isFocused },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )

        // Password Error Message
        if (isFocusedPassword && passwordError != null) {
            Text(
                text = passwordError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Re-enter Password Field
        OutlinedTextField(
            value = repassword,
            onValueChange = { viewModel.updateRepassword(it) },
            label = { Text("Re-Enter your password") },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )

        // Password match error
        if (repassword.isNotEmpty() && password != repassword) {
            Text(
                text = "Passwords do not match",
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // API error message display
        if (errorMessage.isNotEmpty()) {
            Text(
                text = errorMessage,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 10.dp),
                color = Color.Red,
                fontSize = 14.sp
            )
        }

        // Submit Button with loading state
        Button(
            onClick = {
                if (isFormValid) {
                    // Use the stored token value
                    ResetPasswordApi(tokenValue ?: "", password, navController, viewModel)
                } else {
                    viewModel.setErrorMessage("Please fix the validation errors before submitting")
                }
            },
            modifier = Modifier
                .padding(start = 20.dp, end = 20.dp, top = 100.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
            enabled = isFormValid && !isLoading
        ) {
            if (isLoading) {
                // Show loading indicator
                androidx.compose.material3.CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = Color.White,
                    strokeWidth = 2.dp
                )
            } else {
                Text(
                    text = stringResource(id = R.string.Submit),
                    color = Color.White
                )
            }
        }
    }
}// the password now is reset
// after this the user should be redirected to the home page
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── SearchPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mealflow.data.model.Meal
import com.example.mealflow.ui.components.MealItem
import com.example.mealflow.viewModel.MealViewModel
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Refresh
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun SearchPage(
    meals: List<Meal>,
    onMealClick: (Meal) -> Unit,
    viewModel: MealViewModel? = null,
    navController: NavController
) {
    val scope = rememberCoroutineScope()
    var searchQuery by remember { mutableStateOf("") }
    var searchJob by remember { mutableStateOf<Job?>(null) }

    // Collect states from viewModel if available
    val isLoading by viewModel?.isLoading?.collectAsState() ?: remember { mutableStateOf(false) }
    val errorMessage by viewModel?.errorMessage?.collectAsState() ?: remember { mutableStateOf<String?>(null) }

    // Local state for search active tracking
    var isSearchActive by remember { mutableStateOf(false) }

    // Execute search with proper debounce
    fun executeSearch(query: String) {
        searchJob?.cancel()
        searchJob = scope.launch {
            delay(500) // Wait for user to finish typing
            isSearchActive = query.isNotEmpty()
            viewModel?.searchMeals(query)
        }
    }

    Column(modifier = Modifier.fillMaxSize()) {
        // Search header and bar
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Search bar - takes most of the space
            OutlinedTextField(
                value = searchQuery,
                onValueChange = { newQuery ->
                    searchQuery = newQuery
                    executeSearch(newQuery)
                },
                modifier = Modifier
                    .weight(1f),
                label = { Text("Search meals") },
                leadingIcon = {
                    Icon(Icons.Default.Search, contentDescription = "Search")
                },
                trailingIcon = {
                    if (searchQuery.isNotEmpty()) {
                        IconButton(onClick = {
                            searchQuery = ""
                            executeSearch("")
                        }) {
                            Icon(Icons.Default.Clear, contentDescription = "Clear search")
                        }
                    }
                },
                singleLine = true
            )

            // Refresh button
            if (viewModel != null) {
                IconButton(
                    onClick = { viewModel.refreshMeals() },
                    modifier = Modifier.padding(start = 8.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Refresh,
                        contentDescription = "Refresh"
                    )
                }
            }
        }

        // Content area
        Box(modifier = Modifier.fillMaxSize()) {
            // Loading indicator for full page loading
            if (isLoading && meals.isEmpty()) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        CircularProgressIndicator()
                        Spacer(modifier = Modifier.height(16.dp))
                        Text("Loading meals...")
                    }
                }
            }
            // No results message
            else if (meals.isEmpty()) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        modifier = Modifier.padding(32.dp)
                    ) {
                        Text(
                            text = if (isSearchActive) {
                                "No meals found matching \"$searchQuery\""
                            } else {
                                "No meals available. Try refreshing!"
                            },
                            textAlign = TextAlign.Center,
                            style = MaterialTheme.typography.bodyLarge
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        if (viewModel != null) {
                            Button(
                                onClick = { viewModel.refreshMeals() }
                            ) {
                                Icon(
                                    Icons.Default.Refresh,
                                    contentDescription = "Refresh",
                                    modifier = Modifier.size(20.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text("Refresh")
                            }
                        }
                    }
                }
            }
            // Meals grid - when we have data
            else {
                LazyVerticalGrid(
                    columns = GridCells.Fixed(2),
                    contentPadding = PaddingValues(16.dp),
                    horizontalArrangement = Arrangement.spacedBy(16.dp),
                    verticalArrangement = Arrangement.spacedBy(16.dp),
                    modifier = Modifier.fillMaxSize()
                ) {
                    items(meals) { meal ->
                        MealItem(
                            meal = meal,
                            onClick = { onMealClick(meal) }
                        )
                    }
                }

                // Show a small loading indicator for search refreshes
                if (isLoading) {
                    CircularProgressIndicator(
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                            .padding(16.dp)
                            .size(24.dp),
                        strokeWidth = 2.dp
                    )
                }
            }

            // Error snackbar if there's an error message
            if (!errorMessage.isNullOrBlank()) {
                Snackbar(
                    modifier = Modifier
                        .align(Alignment.BottomCenter)
                        .padding(16.dp),
                    action = {
                        TextButton(onClick = { viewModel?.refreshMeals() }) {
                            Text("Retry")
                        }
                    }
                ) {
                    Text(errorMessage ?: "Unknown error occurred")
                }
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── StartPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.DynamicButton
import com.example.mealflow.ui.theme.MealFlowTheme

// ----------------------- Register Page ---------------------------
@Composable
fun StartPage(navController: NavController) {
    Box(modifier = Modifier.fillMaxSize()) {
        // ----------------------- Title Text -----------------------------
        Text(
            text = stringResource(id = R.string.Header),
            modifier = Modifier
                .padding(start = 20.dp, top = 100.dp, end = 20.dp)
                .align(Alignment.CenterStart),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold,
        )
        Column(
            modifier = Modifier.align(alignment = Alignment.BottomCenter)
        ) {
            // Button ------------------ Get Started -----------------------
            Button(
                onClick = { navController.navigate("Register Page") },
                modifier = Modifier
                    .padding(20.dp)
                    .align(alignment = Alignment.CenterHorizontally)
                    .width(150.dp),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
            ) {
                Text(
                    text = stringResource(id = R.string.Get_Started),
                    color = Color.White
                )
            }
            // Row ------------------ Login -----------------------
            Row(
                modifier = Modifier
                    .align(Alignment.CenterHorizontally)
                    .padding(bottom = 100.dp)
            ) {
                // ----------------------- Text -----------------------------
                Text(text = stringResource(id = R.string.Already_member))
                // ----------------------- Login (Clickable Text) -----------------------------
                Text(
                    text = "Login",
                    modifier = Modifier.clickable { navController.navigate("Login Page") },
                    color = Color.Blue
                )
            }
        }
    }
}

// ----------------------- Function to preview StartPage ---------------------------
@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewStartPage() {
    MealFlowTheme {
        StartPage(navController = rememberNavController())
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   │   ├── SuccessfulResetedPass.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight.Companion.Bold
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Preview
@Composable
fun SucResPasPage(){
    Column (
        modifier = Modifier
            .fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ){
        Text(text = "You've successfully reset your password!",
            fontWeight = Bold,
            fontSize = 20.sp,
            modifier = Modifier
                .fillMaxWidth()
                .fillMaxWidth()
                .padding(bottom = 50.dp)
        )
        Button(
            onClick = {}
        ) {
            Text(
                text = "Go to Home Page"
            )
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── theme
│       ├── Color.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.theme

import androidx.compose.ui.graphics.Color

// Original colors
val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// Added colors referenced in ForgetPasswordPage
val Black = Color(0xFF000000)
val White = Color(0xFFFFFFFF)
val Red = Color(0xFFFF0000)
val Blue = Color(0xFF0000FF)
////////////////////////////////////////////////////////////////////////////////////////

│       ├── Theme.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun MealFlowTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
////////////////////////////////////////////////////////////////////////////////////////

│       ├── Type.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
////////////////////////////////////////////////////////////////////////////////////////

├── utils
│   ├── Validator.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.utils


object Validator {
    private val emailRegex = """^[^\s@]+@[^\s@]+\.[^\s@]+$""".toRegex()
    private val usernameRegex = "^[a-zA-Z][a-zA-Z0-9_]{2,29}$".toRegex()
    private val passwordRegex = "(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#\$%^&*]).{8,64}".toRegex()
    private val otpRegex = "^\\d{6}$".toRegex()

    fun validateUsername(username: String?): String? {
        return when {
            username.isNullOrBlank() -> "Username is required."
            username.length < 3 -> "Username must be at least 3 characters long."
            !usernameRegex.matches(username) -> "Username must start with a letter and can only contain letters, numbers, and underscores."
            else -> null
        }
    }

    fun validateEmail(email: String?): String? {
        return when {
            email.isNullOrBlank() -> "Email is required."
            !emailRegex.matches(email) -> "Please provide a valid email address."
            else -> null
        }
    }

    fun validatePassword(password: String?): String? {
        return when {
            password.isNullOrBlank() -> "Password is required."
            password.length < 8 -> "Password must be at least 8 characters long."
            password.length > 64 -> "Password cannot be longer than 64 characters."
            !passwordRegex.matches(password) -> "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character (!@#\$%^&*)."
            else -> null
        }
    }

    fun validateOtp(otp: String?): String? {
        return when {
            otp.isNullOrBlank() -> "OTP is required."
            !otpRegex.matches(otp) -> "Invalid OTP."
            else -> null
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── viewModel
    ├── ForgetPasswordViewModel.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.viewModel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.mealflow.utils.Validator

class ForgetPasswordViewModel : ViewModel() {
    private var _email = MutableLiveData("")
    val email: LiveData<String> get() = _email

    private var _password = MutableLiveData("")
    val password: LiveData<String> get() = _password

    private var _repassword = MutableLiveData("")
    val repassword: LiveData<String> get() = _repassword

    private var _passwordVisible = MutableLiveData(false)
    val passwordVisible: LiveData<Boolean> get() = _passwordVisible

    private val _forgetPasswordMessage = MutableLiveData<String?>()
    val forgetPasswordMessage: LiveData<String?> get() = _forgetPasswordMessage

    private val _navigateToOtp = MutableLiveData<Boolean>()
    val navigateToOtp: LiveData<Boolean> get() = _navigateToOtp

    // Token handling
    private val _token = MutableLiveData<String?>()
    val token: LiveData<String?> get() = _token

    private val _showErrorPopup = MutableLiveData(false)
    val showErrorPopup: LiveData<Boolean> get() = _showErrorPopup

    // Loading state
    private val _isLoading = MutableLiveData(false)
    val isLoading: LiveData<Boolean> = _isLoading

    // Error message - combined the two declarations
    private val _errorMessage = MutableLiveData<String>()
    val errorMessage: LiveData<String> get() = _errorMessage

    fun updateToken(newToken: String) {
        _token.value = newToken
    }

    fun updatePassword(newPassword: String) {
        _password.value = newPassword
    }

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updateRepassword(newRepassword: String) {
        _repassword.value = newRepassword
    }

    fun togglePasswordVisibility() {
        _passwordVisible.value = _passwordVisible.value?.not()
    }

    fun toggleShowErrorPopupVisibility() {
        _showErrorPopup.value = _showErrorPopup.value?.not()
    }

    fun validateInputs(email: String, password: String, repassword: String): Boolean {
        val errors = mutableListOf<String>()

        val emailError = Validator.validateEmail(email)
        val passwordError = Validator.validatePassword(password)

        // Check if passwords match
        if (password != repassword) {
            errors.add("Passwords do not match")
        }

        emailError?.let { errors.add(it) }
        passwordError?.let { errors.add(it) }

        if (errors.isNotEmpty()) {
            _errorMessage.value = errors.joinToString("\n")
            _showErrorPopup.value = true
            return false
        }

        return true
    }

    fun dismissErrorPopup() {
        _showErrorPopup.value = false
    }

    fun setLoading(loading: Boolean) {
        _isLoading.value = loading
    }

    fun setErrorMessage(message: String) {
        _errorMessage.value = message
    }
}
////////////////////////////////////////////////////////////////////////////////////////

    ├── LoginViewModel.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.viewModel

import android.content.Context
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.navigation.NavController
import com.example.mealflow.network.loginApi
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay

class LoginViewModel : ViewModel() {
    private var _email = MutableLiveData("")
    val email: LiveData<String> get() = _email

    private var _password = MutableLiveData("")
    val password: LiveData<String> get() = _password

    private var _passwordVisible = MutableLiveData(false)
    val passwordVisible: LiveData<Boolean> get() = _passwordVisible

    private val _registrationMessage = MutableLiveData<String?>()
    val registrationMessage: LiveData<String?> get() = _registrationMessage

    private val _navigateToOtp = MutableLiveData<Boolean>()
    val navigateToOtp: LiveData<Boolean> get() = _navigateToOtp

    // Add a new LiveData to track navigation to home screen
    private val _navigateToHome = MutableLiveData<Boolean>()
    val navigateToHome: LiveData<Boolean> get() = _navigateToHome

    // Add loading state
    private val _isLoading = MutableLiveData(false)
    val isLoading: LiveData<Boolean> get() = _isLoading

    // This will be set to true when login is successful to trigger data fetching
    private val _loginSuccessful = MutableLiveData<Boolean>()
    val loginSuccessful: LiveData<Boolean> get() = _loginSuccessful

    private val _loginMessage = MutableLiveData<String>()
    val loginMessage: LiveData<String> get() = _loginMessage

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        _password.value = newPassword
    }

    fun togglePasswordVisibility() {
        _passwordVisible.value = _passwordVisible.value?.not()
    }

    fun loginButton(email: String, password: String, navController: NavController) {
        // Set loading state to true before API call
        _isLoading.value = true

        viewModelScope.launch {
            try {
                loginApi(email, password, navController, this@LoginViewModel)
            } catch (e: Exception) {
                // If there's an exception, set error message and reset loading state
                _loginMessage.value = "Login failed: ${e.message}"
                _isLoading.value = false
            }
        }
    }

    fun setLoginMessage(message: String) {
        _loginMessage.value = message
    }

    // Add a function to navigate to home screen
    fun navigateToHomeScreen() {
        // First mark login as successful to trigger data fetching
        _loginSuccessful.postValue(true)  // Use postValue for background thread safety

        // Add a small delay to ensure data fetching starts before navigation
        viewModelScope.launch {
            delay(300) // Small delay to let data fetching start
            _navigateToHome.postValue(true)
            _isLoading.postValue(false)
        }
    }

    // Add a function to reset navigation flag after navigation completes
    fun onHomeNavigationComplete() {
        _navigateToHome.value = false
    }

    // Reset the login successful flag (useful for logout)
    fun resetLoginState() {
        _loginSuccessful.value = false
    }

    // Set loading state
    fun setLoading(isLoading: Boolean) {
        _isLoading.value = isLoading
    }
}
////////////////////////////////////////////////////////////////////////////////////////

    ├── MealViewModel.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.viewModel

import android.app.Application
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.mealflow.data.model.Meal
import com.example.mealflow.data.repository.MealRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.util.concurrent.atomic.AtomicBoolean

class MealViewModel(
    application: Application,
    private val repository: MealRepository
) : AndroidViewModel(application) {

    // State for meals
    private val _meals = MutableStateFlow<List<Meal>>(emptyList())
    val meals: StateFlow<List<Meal>> = _meals.asStateFlow()

    // State for loading
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    // State for error messages
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    // Flag to prevent duplicate fetch requests
    private val isInitialFetchDone = AtomicBoolean(false)

    init {
        // We'll fetch meals when the ViewModel is created if we're not waiting for login
        fetchRecommendedMeals()
    }

    // Call this method after login to fetch recommended meals
    fun fetchRecommendedMeals() {
        // Only fetch if we haven't already or if we're explicitly refreshing
        if (!isInitialFetchDone.get() || _meals.value.isEmpty()) {
            viewModelScope.launch {
                _isLoading.value = true
                _errorMessage.value = null

                try {
                    Log.d("MealViewModel", "Fetching recommended meals from repository")

                    // Fetch data from repository
                    val result = repository.getRecommendedMeals()

                    if (result.isSuccess) {
                        val mealList = result.getOrNull() ?: emptyList()
                        if (mealList.isNotEmpty()) {
                            Log.d("MealViewModel", "Successfully fetched ${mealList.size} meals")
                            _meals.value = mealList
                            isInitialFetchDone.set(true)
                        } else {
                            Log.d("MealViewModel", "Meal list was empty from API")
                            _meals.value = emptyList()
                            _errorMessage.value = "No meals available from the server."
                        }
                    } else {
                        val exception = result.exceptionOrNull() ?: Exception("Unknown error")
                        Log.e("MealViewModel", "Error fetching meals: ${exception.message}", exception)

                        // Keep current meals or set to empty if none
                        if (_meals.value.isEmpty()) {
                            _errorMessage.value = "Could not connect to the server. Pull to refresh."
                        } else {
                            _errorMessage.value = "Could not refresh meals. Using cached data."
                        }

                        // Log the stack trace for debugging
                        exception.printStackTrace()
                    }
                } catch (e: Exception) {
                    Log.e("MealViewModel", "Exception when fetching meals: ${e.message}", e)

                    _errorMessage.value = "Unexpected error occurred. Please try again."

                    e.printStackTrace()
                } finally {
                    _isLoading.value = false
                }
            }
        }
    }

    // Function to force a refresh of the meal data
    fun refreshMeals() {
        isInitialFetchDone.set(false) // Reset the flag to force a fresh fetch
        fetchRecommendedMeals()
    }

    // Function to search meals by query
    fun searchMeals(query: String) {
        viewModelScope.launch {
            _isLoading.value = true
            _errorMessage.value = null

            try {
                if (query.isEmpty()) {
                    // If empty query, restore original meals list
                    if (_meals.value.isEmpty()) {
                        // If we don't have real data yet, fetch it
                        fetchRecommendedMeals()
                    } else {
                        // Use the meals we already fetched
                        _isLoading.value = false
                    }
                    return@launch
                }

                // Call repository for search function
                val result = repository.searchMeals(query)

                if (result.isSuccess) {
                    val matchingMeals = result.getOrNull() ?: emptyList()
                    if (matchingMeals.isNotEmpty()) {
                        _meals.value = matchingMeals
                    } else {
                        // We found no matches
                        _meals.value = emptyList()
                        _errorMessage.value = "No meals found matching '$query'"
                    }
                } else {
                    val exception = result.exceptionOrNull() ?: Exception("Unknown error")
                    Log.e("MealViewModel", "Error searching meals: ${exception.message}")

                    // Fallback to local filtering of whatever data we have
                    val currentMeals = _meals.value
                    if (currentMeals.isNotEmpty()) {
                        val filteredMeals = currentMeals.filter { meal ->
                            meal.name.contains(query, ignoreCase = true) ||
                                    meal.description.contains(query, ignoreCase = true) ||
                                    meal.tags.any { it.contains(query, ignoreCase = true) }
                        }

                        _meals.value = filteredMeals
                        if (filteredMeals.isEmpty()) {
                            _errorMessage.value = "No meals found matching '$query'"
                        } else {
                            _errorMessage.value = "Using local search results (server unavailable)"
                        }
                    } else {
                        _errorMessage.value = "Cannot search - no meal data available. Try refreshing first."
                    }
                }
            } catch (e: Exception) {
                Log.e("MealViewModel", "Exception during search: ${e.message}")
                _errorMessage.value = "Search failed: ${e.message}"

                // Keep the current meal list
            } finally {
                _isLoading.value = false
            }
        }
    }

    // Function to reset meal list to the original fetched data
    fun resetMealList() {
        // Simply clear the search by setting empty query
        searchMeals("")
    }
}
////////////////////////////////////////////////////////////////////////////////////////

    ├── MealViewModelFactory.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.viewModel

import android.app.Application
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.mealflow.data.repository.MealRepository
import com.example.mealflow.network.ApiMeal

class MealViewModelFactory(private val application: Application) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(MealViewModel::class.java)) {
            val repository = MealRepository(application)
            @Suppress("UNCHECKED_CAST")
            return MealViewModel(application, repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}
////////////////////////////////////////////////////////////////////////////////////////

    ├── RegisterViewModel.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.viewModel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.mealflow.utils.Validator

class RegisterViewModel : ViewModel(){
    private var _username = MutableLiveData("")
    val username: LiveData<String> get() = _username

    private var _email = MutableLiveData<String>("")
    val email: LiveData<String> get() = _email

    private var _password = MutableLiveData("")
    val password: LiveData<String> get() = _password

    private var _repassword = MutableLiveData("")
    val repassword: LiveData<String> get() = _repassword

    private var _passwordVisible = MutableLiveData(false)
    val passwordVisible: LiveData<Boolean> get() = _passwordVisible

    //private var _showOtpPopup = MutableLiveData(false)
    //val context = LocalContext.current  // ✅ الحصول على الـ Context

    private val _registrationMessage = MutableLiveData<String?>()
    val registrationMessage: LiveData<String?> get() = _registrationMessage

    private val _navigateToOtp = MutableLiveData<Boolean>()
    val navigateToOtp: LiveData<Boolean> get() = _navigateToOtp

//    private val _showErrorPopup = MutableLiveData<Boolean>()
//    val showErrorPopup: LiveData<Boolean> get() = _showErrorPopup

    fun updateUsername(newUsername: String) {
        _username.value = newUsername
    }

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        _password.value = newPassword
    }

    fun updateRepassword(newRepassword: String) {
        _repassword.value = newRepassword
    }

    fun toggleShowErrorPopupVisibility() {
        _showErrorPopup.value = _showErrorPopup.value?.not()
    }

    fun togglePasswordVisibility() {
        _passwordVisible.value = _passwordVisible.value?.not()
    }
    fun setEmail(newEmail: String) {
        _email.value = newEmail
    }
    fun getEmail(): String {
        return _email.value ?: ""
    }

    private val _showErrorPopup = MutableLiveData(false)
    val showErrorPopup: LiveData<Boolean> get() = _showErrorPopup

    private val _errorMessage = MutableLiveData<String?>()
    val errorMessage: LiveData<String?> get() = _errorMessage

    fun validateInputs(username: String, email: String, password: String): Boolean {
        val errors = mutableListOf<String>()

        val usernameError = Validator.validateUsername(username)
        val emailError = Validator.validateEmail(email)
        val passwordError = Validator.validatePassword(password)

        usernameError?.let { errors.add(it) }
        emailError?.let { errors.add(it) }
        passwordError?.let { errors.add(it) }

        if (errors.isNotEmpty()) {
            _errorMessage.value = errors.joinToString("\n")
            _showErrorPopup.value = true
            return false // ❌ هناك أخطاء، لا تكمل التسجيل
        }

        return true // ✅ لا توجد أخطاء، يمكن المتابعة
    }

    fun dismissErrorPopup() {
        _showErrorPopup.value = false
    }
}
////////////////////////////////////////////////////////////////////////////////////////

