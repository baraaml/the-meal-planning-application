├── components
│   ├── MealItem.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.data.model.Meal
import com.example.mealflow.R
import androidx.compose.ui.res.painterResource
@Composable
fun MealItem(meal: Meal, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(4.dp)
            .clickable(onClick = onClick),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(modifier = Modifier.fillMaxWidth()) {
            // Display meal image with safe handling
            AsyncImage(
                model = meal.imageUrl.takeIf { meal.imageUrl.isNotBlank() } ?: R.drawable.android_robot,
                contentDescription = meal.name,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                contentScale = ContentScale.Crop,
                placeholder = painterResource(id = R.drawable.android_robot),
                error = painterResource(id = R.drawable.android_robot)
            )

            Column(modifier = Modifier.fillMaxWidth().padding(12.dp)) {
                // Safely display meal name
                Text(
                    text = meal.name.takeIf { meal.name.isNotBlank() } ?: "Unnamed Meal",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Safely display meal description
                Text(
                    text = meal.description.takeIf { meal.description.isNotBlank() } ?: "No description available",
                    style = MaterialTheme.typography.bodyMedium,
                    maxLines = 3,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Display tags and rating if available
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    meal.tags.firstOrNull()?.let {
                        Text(
                            text = it,
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    Text(
                        text = "Rating: ${meal.rating}",
                        style = MaterialTheme.typography.bodySmall
                    )
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////

├── navigation
│   ├── AppNavigation.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.navigation

import android.annotation.SuppressLint
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.example.mealflow.data.model.Meal
import com.example.mealflow.ui.screens.CommunityPage
import com.example.mealflow.ui.screens.GroceriesPage
import com.example.mealflow.ui.screens.MealDetailScreen
import com.example.mealflow.ui.screens.SearchPage
import com.example.mealflow.ui.screens.HomePage
import com.example.mealflow.ui.screens.PlannerPage
import com.example.mealflow.viewModel.MealViewModel

@SuppressLint("StateFlowValueCalledInComposition")
@Composable
fun AppNavigation(
    navController: NavHostController,
    viewModel: MealViewModel
) {
    NavHost(
        navController = navController,
        startDestination = Screen.HomeScreen.route
    ) {
        composable(Screen.HomeScreen.route) {
            HomePage(
                meals = viewModel.meals.value,
                onMealClick = { meal ->
                    navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
                    navController.navigate(Screen.MealDetailScreen.route)
                }
            )
        }

        composable(Screen.SearchScreen.route) {
            SearchPage(
                viewModel = viewModel,
                onMealClick = { meal ->
                    navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
                    navController.navigate(Screen.MealDetailScreen.route)
                }
            )
        }

        composable(Screen.PlannerScreen.route) {
            PlannerPage()
        }

        composable(Screen.CommunityScreen.route) {
            CommunityPage()
        }

        composable(Screen.GroceriesScreen.route) {
            GroceriesPage()
        }

        composable(Screen.MealDetailScreen.route) {
            val meal = navController.previousBackStackEntry
                ?.savedStateHandle
                ?.get<Meal>("meal")

            if (meal != null) {
                MealDetailScreen(
                    meal = meal,
                    onNavigateBack = {
                        navController.popBackStack()
                    }
                )
            }
        }
    }
}

sealed class Screen(val route: String) {
    object HomeScreen : Screen("home")
    object SearchScreen : Screen("search")
    object MealDetailScreen : Screen("meal-detail")
    object CommunityScreen : Screen("community")
    object GroceriesScreen : Screen("groceries")
    object PlannerScreen : Screen("planner")
}

class NavigationActions(private val navController: NavHostController) {
    fun navigateToHome() {
        navController.navigate(Screen.HomeScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToSearch() {
        navController.navigate(Screen.SearchScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToCommunity() {
        navController.navigate(Screen.CommunityScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToGroceries() {
        navController.navigate(Screen.GroceriesScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToPlanner() {
        navController.navigate(Screen.PlannerScreen.route) {
            popUpTo(navController.graph.startDestinationId) {
                saveState = true
            }
            launchSingleTop = true
            restoreState = true
        }
    }

    fun navigateToMealDetail(meal: Meal) {
        navController.currentBackStackEntry?.savedStateHandle?.set("meal", meal)
        navController.navigate(Screen.MealDetailScreen.route)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

├── screens
│   ├── CommunityPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController

@Composable
fun CommunityPage() {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Community", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── ForgetPasswordPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import android.util.Log
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import com.example.mealflow.ui.theme.Red
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.BackButton
import com.example.mealflow.network.ForgetPasswordRequest
import com.example.mealflow.network.forgetPasswordApi
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import com.example.mealflow.viewModel.LoginViewModel


// ----------------------- Forget Password Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ForgetPasswordPage(navController: NavController,viewModel: ForgetPasswordViewModel = viewModel())
{
    // ----------------------- Variables ---------------------------
    val email by viewModel.email.observeAsState("")
    val emailError = Validator.validateEmail(email)
    var isFocusedEmail by remember { mutableStateOf(false) }

        Column {
            // ----------------------- Back Button ---------------------------
            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(top = 20.dp), horizontalArrangement = Arrangement.Start) {
                BackButton(onClick = {
                    navController.navigate("Home Page")
                })
            }
            // ----------------------- Forgotten Password Text -----------------------------
            Text(
                text = stringResource(id = R.string.ForgottenPassword),
                Modifier.padding(10.dp),
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold
            )
            // ----------------------- InputFields ---------------------------
            // ---------------------------------------------------------------
            // Input field ------------------ Email -----------------------
            OutlinedTextField(
                value = email,
                onValueChange = { viewModel.updateEmail(it) },
                label = { Text(stringResource(id = R.string.EnterEmail)) },
                singleLine = true,
                textStyle = TextStyle(color = Color.Black),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,  // لون الحدود عند التركيز
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 20.dp, end = 20.dp)
                    .onFocusChanged { isFocusedEmail = it.isFocused }
            )
            // Text ------------------ Email Error -----------------------
            if (isFocusedEmail && emailError != null) {
                Text(
                    text = emailError,
                    modifier = Modifier
                        .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                    color = Color.Red,
                    fontSize = 12.sp
                )
            }
            //-----------------------------------------------------------------------------------------------------
            //-----------------------------------------------------------------------------------------------------
            // Button ------------------ Reset your Password -------------------------------------------------------------------
            Button(
                onClick = {
                    if(emailError == null)
                    {
                        forgetPasswordApi(email,navController,viewModel)
                    }
                },
                Modifier
                    .padding(start = 20.dp, end = 20.dp, top = 20.dp)
                    .align(alignment = Alignment.CenterHorizontally)
                    .fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
            ) {
                Text(
                    text = stringResource(id = R.string.ResetPassword),
                    color = Color.White
                )
            }
        }
}

//------------------------------------------------------------------
//------------------------------------------------------------------
@Preview(showSystemUi = true, showBackground = true)
@Composable
fun ForgetPasswordPagePreview()
{
    ForgetPasswordPage(navController = rememberNavController())
}
//---------------------------------------------------------------
//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////

│   ├── GroceriesPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController
import com.example.mealflow.viewModel.MealViewModel

@Composable
fun GroceriesPage() {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Groceries", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── HomePage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import com.example.mealflow.R
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.data.model.Ingredient
import com.example.mealflow.data.model.Interactions
import com.example.mealflow.data.model.Meal
import com.example.mealflow.data.model.User
import java.util.Calendar

@Composable
fun HomePage(
    meals: List<Meal>,
    userName: String = "User", // Add userName parameter with default value
    onMealClick: (Meal) -> Unit
) {
    // Get current hour to determine greeting
    val calendar = Calendar.getInstance()
    val hourOfDay = calendar.get(Calendar.HOUR_OF_DAY)

    val greeting = when {
        hourOfDay < 12 -> "Good Morning"
        hourOfDay < 17 -> "Good Afternoon"
        else -> "Good Evening"
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 16.dp)
            .verticalScroll(rememberScrollState())
    ) {
        // Improved greeting header with user name
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = "$greeting,",
                    style = MaterialTheme.typography.headlineSmall,
                    color = MaterialTheme.colorScheme.onSurface
                )
                Text(
                    text = userName,
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
            }

            // You could add a user avatar or notification icon here
            // IconButton(onClick = { /* Handle profile click */ }) {
            //     Icon(
            //         imageVector = Icons.Default.AccountCircle,
            //         contentDescription = "Profile",
            //         modifier = Modifier.size(40.dp)
            //     )
            // }
        }

        // Section 1: Planned
        SectionHeader("Planned")
        if (meals.isNotEmpty()) {
            MealRowImproved(meals = meals.take(5), onMealClick = onMealClick)
        } else {
            EmptyStateMessage("No planned meals available")
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Section 2: Recommended
        SectionHeader("Recommended")
        if (meals.isNotEmpty()) {
            MealRowImproved(meals = meals.take(5), onMealClick = onMealClick)
        } else {
            EmptyStateMessage("No recommendations available")
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Section 3: Community's Popular
        SectionHeader("Community's Popular")
        if (meals.isNotEmpty()) {
            MealRowImproved(meals = meals.take(5), onMealClick = onMealClick)
        } else {
            EmptyStateMessage("No popular meals available")
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Section 4: You May Like
        SectionHeader("You May Like")
        if (meals.isNotEmpty()) {
            MealRowImproved(meals = meals.take(5), onMealClick = onMealClick)
        } else {
            EmptyStateMessage("No suggestions available")
        }

        // Add bottom space for better scrolling experience
        Spacer(modifier = Modifier.height(16.dp))
    }
}

@Composable
fun SectionHeader(title: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 12.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onBackground
        )

        TextButton(onClick = { /* Handle see all click */ }) {
            Text(
                text = "See All",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.primary
            )
        }
    }
}

@Composable
fun EmptyStateMessage(message: String) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        color = MaterialTheme.colorScheme.surfaceVariant,
        shape = MaterialTheme.shapes.medium
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = message,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun MealRowImproved(
    meals: List<Meal>,
    onMealClick: (Meal) -> Unit
) {
    LazyRow(
        modifier = Modifier.fillMaxWidth(),
        contentPadding = PaddingValues(vertical = 8.dp),
        horizontalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        items(meals) { meal ->
            HomeMealCard(
                meal = meal,
                onClick = {
                    try {
                        onMealClick(meal)
                    } catch (e: Exception) {
                        // Log error but don't crash
                        android.util.Log.e("HomePage", "Error navigating to meal details", e)
                    }
                }
            )
        }
    }
}

/**
 * Custom card for the home page with proper sizing and layout
 */
@Composable
fun HomeMealCard(
    meal: Meal,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .width(160.dp)
            .height(220.dp),
        shape = MaterialTheme.shapes.medium,
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        onClick = onClick
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // Image takes about 60% of card height
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(130.dp)
            ) {
                // Properly load the meal image with AsyncImage
                AsyncImage(
                    model = meal.imageUrl,
                    contentDescription = meal.name,
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize(),
                    placeholder = painterResource(id = R.drawable.android_robot),
                    error = painterResource(id = R.drawable.android_robot)
                )
            }

            // Content section takes remaining space
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp)
            ) {
                // Meal name
                Text(
                    text = meal.name,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Brief description or category
                Text(
                    text = meal.description,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Rating or cooking time
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Display the first tag or default text
                    Text(
                        text = meal.tags.firstOrNull() ?: "Meal",
                        style = MaterialTheme.typography.labelSmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
    }
}

// -------------Preview--------------

@Preview(showBackground = true)
@Composable
fun HomePagePreview() {
    val sampleMeals = listOf(
        createSampleMeal(
            "1",
            "Spaghetti Carbonara",
            "A classic Italian pasta dish with eggs, cheese, and bacon.",
            "https://example.com/spaghetti.jpg",
            listOf("Italian", "Pasta")
        ),
        createSampleMeal(
            "2",
            "Chicken Tikka Masala",
            "Grilled chicken in a spicy curry sauce.",
            "https://example.com/chicken-tikka.jpg",
            listOf("Indian", "Spicy")
        ),
        createSampleMeal(
            "3",
            "Avocado Toast",
            "Simple and healthy breakfast with avocado on toast.",
            "https://example.com/avocado-toast.jpg",
            listOf("Breakfast", "Vegetarian")
        ),
        createSampleMeal(
            "4",
            "Beef Stir Fry",
            "Quick and delicious stir-fried beef with vegetables.",
            "https://example.com/beef-stir-fry.jpg",
            listOf("Asian", "Quick")
        ),
        createSampleMeal(
            "5",
            "Chocolate Cake",
            "Rich and moist chocolate cake for dessert lovers.",
            "https://example.com/chocolate-cake.jpg",
            listOf("Dessert", "Sweet")
        )
    )

    HomePage(
        meals = sampleMeals,
        userName = "Baraa",
        onMealClick = { /* Preview doesn't need click handler */ }
    )
}

/**
 * Helper function to create sample meals for preview
 */
private fun createSampleMeal(
    id: String,
    name: String,
    description: String,
    imageUrl: String,
    tags: List<String>
): Meal {
    return Meal(
        mealId = id,
        name = name,
        description = description,
        imageUrl = imageUrl,
        tags = tags,
        ingredients = listOf(
            Ingredient("Ingredient 1", 1.0, "cup"),
            Ingredient("Ingredient 2", 2.0, "tbsp")
        ),
        instructions = listOf("Step 1: Do something", "Step 2: Do something else"),
        cookware = listOf("Pan", "Pot"),
        preparationTime = 15,
        cookingTime = 30,
        servings = 4,
        caloriesPerServing = 350,
        rating = 4.5,
        reviewsCount = 12,
        createdBy = User("user1", "JohnDoe"),
        isFavorited = false,
        isSaved = false,
        notes = emptyList(),
        interactions = Interactions(100, 50, 2, 10),
        createdAt = "2025-01-01T12:00:00Z",
        updatedAt = "2025-01-01T12:00:00Z"
    )
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── LoginPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens


import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.LoginViewModel

// ----------------------- Login Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginPage(navController: NavController, viewModel: LoginViewModel = viewModel()) {
    // ----------------------- Variables ---------------------------
    val email by viewModel.email.observeAsState("")
    val password by viewModel.password.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val emailError = Validator.validateEmail(email)
    val passwordError = Validator.validatePassword(password)
    var isFocusedEmail by remember { mutableStateOf(false) }
    var isFocusedPassword by remember { mutableStateOf(false) }

    // Observe navigation to home screen
    val navigateToHome by viewModel.navigateToHome.observeAsState(false)

    // Navigate to home screen when navigateToHome is true
    if (navigateToHome) {
        LaunchedEffect(key1 = true) {
            navController.navigate("Home Page") {  // Changed from "Home Screen" to "Home Page" to match your existing code
                // Optional: pop up to the start destination to clear the back stack
                popUpTo(navController.graph.startDestinationId) {
                    saveState = true
                }
                // Avoid multiple copies of the same destination when navigating back
                launchSingleTop = true
                // Restore state when navigating back
                restoreState = true
            }
            viewModel.onHomeNavigationComplete()
        }
    }

    Column {
        // ----------------------- Skip Button ---------------------------
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {
            Text(text = stringResource(id = R.string.Skip),
                Modifier
                    .clickable { /*TODO*/ }
                    .padding(20.dp),
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Gray
            )
        }
        // ----------------------- Join Text -----------------------------
        Text(
            text = stringResource(id = R.string.Welcome_back),
            Modifier.padding(start = 20.dp, top = 40.dp ,end = 20.dp),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold
        )
        // ----------------------- InputFields ---------------------------
        // ---------------------------------------------------------------
        // Input field ------------------ Email -----------------------
        OutlinedTextField(
            value = email,
            onValueChange = { viewModel.updateEmail(it) },
            label = { Text(stringResource(id = R.string.EnterEmail)) },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,  // Color of border when focused
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedEmail = it.isFocused }
        )
        // Text ------------------ Email Error -----------------------
        if (isFocusedEmail && emailError != null)
        {
            Text(
                text = emailError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }
        // Input field ------------------ Password -----------------------
        OutlinedTextField(
            value = password,
            onValueChange = { viewModel.updatePassword(it) },
            label = { Text(stringResource(id = R.string.EnterPassword)) },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,  // Color of border when focused
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedPassword = it.isFocused },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )
        // Text ------------------ Password Error -----------------------
        if (isFocusedPassword && passwordError != null)
        {
            Text(
                text = passwordError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }
        // ----------------------- Forget Password Button ---------------------------
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {
            Text(text = stringResource(id = R.string.ForgotPassword),
                Modifier
                    .clickable { navController.navigate("Forget Password Page") }
                    .padding(end = 25.dp),
                fontWeight = FontWeight.Bold,
                color = Color.Red
            )
        }
        //-----------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------
        // Button ------------------ Log in -------------------------------------------------------------------
        Button(onClick = {
            viewModel.loginButton(email, password, navController)
        },
            Modifier
                .padding(20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text(
                text = stringResource(id = R.string.Login),
                color = Color.White
            )
        }
        // ----------------------- Button to go to the Register page -----------------------
        Row(
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Text(text = stringResource(id = R.string.DoNot_Account))
            Text(text = stringResource(id = R.string.Register),
                Modifier
                    .clickable(onClick = {navController.navigate("Register Page")}
                    ),
                color = Color.Blue
            )
        }
        // ----------------------- Line with text in the middle ---------------------------
        OrDivider("OR")
        // ----------------------- Button to sign in with google ---------------------------
        Button(
            onClick = { /*TODO*/ } ,
            Modifier
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)

        ) {
            Icon(painter = painterResource(
                id = R.drawable.google_icon_icons_com_62736),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier
                    .size(24.dp)
                    .padding(end = 10.dp))
            Text(
                text = "Sign up using Google",
                color = Color.White
            )
        }
    }
}

@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewLoginPage()
{
    LoginPage(navController = rememberNavController())
}

////////////////////////////////////////////////////////////////////////////////////////

│   ├── MealDetailsPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SuggestionChip
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.mealflow.R
import com.example.mealflow.data.model.Meal

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MealDetailScreen(meal: Meal, onNavigateBack: () -> Unit) {
    val scrollState = rememberScrollState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(meal.name) },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .verticalScroll(scrollState)
        ) {
            // Header section
            AsyncImage(
                model = meal.imageUrl,
                contentDescription = meal.name,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                contentScale = ContentScale.Crop,
                placeholder = painterResource(id = R.drawable.android_robot), // Placeholder image
                error = painterResource(id = R.drawable.android_robot) // Error image
            )


            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = meal.name,
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                meal.tags.forEach { tag ->
                    SuggestionChip(
                        onClick = { },
                        label = { Text(tag) }
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Description
            Text(
                text = meal.description,
                style = MaterialTheme.typography.bodyLarge
            )

            Spacer(modifier = Modifier.height(24.dp))

            // Cooking info
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Prep Time", fontWeight = FontWeight.Bold)
                        Text("${meal.preparationTime} min")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Cook Time", fontWeight = FontWeight.Bold)
                        Text("${meal.cookingTime} min")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Servings", fontWeight = FontWeight.Bold)
                        Text("${meal.servings}")
                    }

                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("Calories", fontWeight = FontWeight.Bold)
                        Text("${meal.caloriesPerServing}")
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Ingredients
            Text(
                text = "Ingredients",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.ingredients.forEach { ingredient ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "• ${ingredient.quantity} ${ingredient.unit} ${ingredient.name}",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Instructions
            Text(
                text = "Instructions",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.instructions.forEachIndexed { index, instruction ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                ) {
                    Text(
                        text = "${index + 1}.",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.width(24.dp)
                    )
                    Text(
                        text = instruction,
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Cookware
            Text(
                text = "Cookware",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            meal.cookware.forEach { item ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp)
                ) {
                    Text(
                        text = "• $item",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Creator info
            Card(
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column {
                        Text("Created by", style = MaterialTheme.typography.bodySmall)
                        Text(meal.createdBy.username, fontWeight = FontWeight.Bold)
                    }

                    Row {
                        Text(
                            text = "Rating: ${meal.rating}",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "(${meal.reviewsCount} reviews)",
                            style = MaterialTheme.typography.bodySmall
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── OtpPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.DynamicButton
import com.example.mealflow.network.verifyEmail
import com.example.mealflow.viewModel.RegisterViewModel

// ----------------------- Otp Page ---------------------------
// ----------------------- Function to display text with otp input ---------------------------
@Composable
fun OtpPage(navController: NavController,viewModel: RegisterViewModel) {
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Column(verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally)
        {
            // ----------------------- Header Text -----------------------------
            Text(
                text = stringResource(id = R.string.HeaderOtp),
                fontWeight = FontWeight.Bold,
                fontSize = 24.sp
            )
            // ---------------- Function contains OTP input and verify email button (send OTP) -----------------
            OTPVerificationScreen(navController, viewModel)
        }
    }
}

// ----------------------- Function to preview OtpPage ---------------------------
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewOtpPage()
{
    val testViewModel: RegisterViewModel = viewModel()
    OtpPage(navController = rememberNavController(),testViewModel)
}

// ----------------------- Function to implement OTP input ---------------------------
@Composable
fun OTPInputField(
    otpLength: Int = 6,
    onOtpEntered: (String) -> Unit
) {
    // Single text field for OTP
    var otpValue by remember { mutableStateOf("") }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.fillMaxWidth()
    ) {
        OutlinedTextField(
            value = otpValue,
            onValueChange = { newValue ->
                // Only allow digits and limit to otpLength
                if (newValue.all { it.isDigit() } && newValue.length <= otpLength) {
                    otpValue = newValue

                    // Trigger callback when complete code is entered
                    if (newValue.length == otpLength) {
                        onOtpEntered(newValue)
                    }
                }
            },
            singleLine = true,
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number
            ),
            modifier = Modifier
                .height(55.dp)
                .fillMaxWidth()
                .padding(start = 20.dp, end = 20.dp),
            textStyle = TextStyle(
                fontSize = 18.sp,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            ),
            label = { Text("Enter verification code") },
            placeholder = { Text("123456") }
        )
    }
}

// Update the OTPVerificationScreen function to use the new OTPInputField
@Composable
fun OTPVerificationScreen(navController: NavController, viewModel: RegisterViewModel) {
    var otp by remember { mutableStateOf("") }
    val context = LocalContext.current
    val email by viewModel.email.observeAsState("")

    Column(
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = stringResource(id = R.string.check_email), fontSize = 20.sp)
        Spacer(modifier = Modifier.height(16.dp))

        // Single text field for OTP
        OTPInputField(onOtpEntered = { otp = it })

        Spacer(modifier = Modifier.height(16.dp))

        DynamicButton(
            onClick = {
                verifyEmail(context, otp, email, navController)
            },
            textOnButton = stringResource(id = R.string.Verification),
            buttonWidthDynamic = 200
        )
    }
}

////////////////////////////////////////////////////////////////////////////////////////

│   ├── PlannerPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign.Companion.Center
import androidx.navigation.NavHostController
import com.example.mealflow.viewModel.MealViewModel

@Composable
fun PlannerPage() {
    Box(modifier = Modifier.fillMaxSize()){
        Text(text = "Planner", textAlign = Center)
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── RegisterPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.random.ErrorPopupRegister
import com.example.mealflow.random.InputPopupDialog
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.RegisterViewModel
import com.example.mealflow.network.registerUser


// ----------------------- Register Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterPage(navController: NavController, viewModel: RegisterViewModel)
{
    // ----------------------- Variables ---------------------------
    val username by viewModel.username.observeAsState("")
    val email by viewModel.email.observeAsState("")
    val password by viewModel.password.observeAsState("")
    val repassword by viewModel.repassword.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val context = LocalContext.current
    var showPopupError by remember { mutableStateOf(false) }
    val usernameError = Validator.validateUsername(username)
    val emailError = Validator.validateEmail(email)
    val passwordError = Validator.validatePassword(password)
    var isFocusedUsername by remember { mutableStateOf(false) }
    var isFocusedEmail by remember { mutableStateOf(false) }
    var isFocusedPassword by remember { mutableStateOf(false) }
    var showErrorPopup by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }

    Column {
        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp), horizontalArrangement = Arrangement.End) {

            // Fixed the Skip button navigation
            Text(
                text = "Skip",
                Modifier
                    .clickable { navController.navigate("HomePage") }
                    .padding(20.dp),
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Gray
            )
        }
        // ----------------------- Join Text -----------------------------
        Text(
            text = stringResource(id = R.string.join),
            Modifier.padding(start = 20.dp, top = 40.dp ,end = 20.dp),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold
        )
        // ----------------------- InputFields ---------------------------
        // ---------------------------------------------------------------
        // Input field ------------------ UserName -----------------------
        OutlinedTextField(
            value = username,
            onValueChange = { viewModel.updateUsername(it) },
            label = { Text("Enter username") },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (usernameError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedUsername = it.isFocused }
        )
        // Text ------------------ Username Error -----------------------
        if (isFocusedUsername && usernameError != null)
        {
            Text(
                text = usernameError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Input field ------------------ Email -----------------------
        OutlinedTextField(
            value = email,
            onValueChange = { viewModel.updateEmail(it) },
            label = { Text("Add an Email") },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (emailError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedEmail = it.isFocused }
        )
        // Text ------------------ Email Error -----------------------
        if (isFocusedEmail && emailError != null)
        {
            Text(
                text = emailError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }
        // Input field ------------------ Password -----------------------
        OutlinedTextField(
            value = password,
            onValueChange = { viewModel.updatePassword(it) },
            label = { Text("Enter your password") },
            trailingIcon = {
                Icon(
                    painter = painterResource(
                        id = if (passwordVisible) {
                            R.drawable.eye_view_icon
                        } else {
                            R.drawable.eye_closed_icon
                        }
                    ),
                    contentDescription = null,
                    tint = Color.Gray,
                    modifier = Modifier
                        .size(28.dp)
                        .clickable { viewModel.togglePasswordVisibility() }
                )
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,
            ),
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                .onFocusChanged { isFocusedPassword = it.isFocused },
            singleLine = true,
            textStyle = TextStyle(color = Color.Black),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
        )
        // Text ------------------ Password Error -----------------------
        if (isFocusedPassword && passwordError != null)
        {
            Text(
                text = passwordError,
                modifier = Modifier
                    .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                color = Color.Red,
                fontSize = 12.sp
            )
        }

        // Button ------------------ Sign Up -----------------------
        Button(onClick = {
            if (viewModel.validateInputs(username, email, password)) {
                registerUser(context, username, email, password, navController, onError = { message ->
                    errorMessage = message
                    showErrorPopup = true
                })
            }
        } ,
            Modifier
                .padding(20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text(
                text = "Sign up",
                color = Color.White
            )
        }
        //----------------------- Button to go to the login page -----------------------
        Row(
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Text(text = "You already have an account? ")
            Text(text = "Login",
                Modifier
                    .clickable(onClick = {navController.navigate("Login Page")}
                    ),
                color = Color.Blue
            )
        }
        // ----------------------- Line with text in the middle ---------------------------
        OrDivider("OR")
        // ----------------------- Button to sign in with google ---------------------------
        Button(
            onClick = { /*TODO*/ } ,
            Modifier
                .padding(start = 20.dp, end = 20.dp, bottom = 20.dp)
                .align(alignment = Alignment.CenterHorizontally)
                .fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)

        ) {
            Icon(
                painter = painterResource(
                    id = R.drawable.google_icon_icons_com_62736
                ),
                contentDescription = null,
                tint = Color.Unspecified,
                modifier = Modifier
                    .size(24.dp)
                    .padding(end = 10.dp)
            )
            Text(
                text = "Sign up using Google",
                color = Color.White
            )
        }
        ErrorPopupRegister(viewModel = viewModel)
        if (showErrorPopup) {
            InputPopupDialog(
                onDismiss = { showErrorPopup = false },
                onConfirm = { showErrorPopup = false },
                initialText = errorMessage
            )
        }
    }
}

@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewRegisterPage()
{
    val registerViewModel: RegisterViewModel = viewModel()
    RegisterPage(navController = rememberNavController(),registerViewModel)
}
//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

//@Composable
//fun PreviewRegisterPage1()
//{
//    val usernameError = Validator.validateUsername("user_123")
//    val emailError = Validator.validateEmail("test@example.com")
//    val passwordError = Validator.validatePassword("Test@1234")
//    val otpError = Validator.validateOtp("123456")
//
//    if (usernameError != null) println(usernameError)
//    if (emailError != null) println(emailError)
//    if (passwordError != null) println(passwordError)
//    if (otpError != null) println(otpError)
//}

////////////////////////////////////////////////////////////////////////////////////////

│   ├── ResetPasswordPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.BackButton
import com.example.mealflow.network.ResetPasswordApi
import com.example.mealflow.random.OrDivider
import com.example.mealflow.utils.Validator
import com.example.mealflow.viewModel.ForgetPasswordViewModel
import com.example.mealflow.viewModel.LoginViewModel


// ----------------------- Login Page ---------------------------
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ResetPasswordPage(navController: NavController, token: String?,viewModel: ForgetPasswordViewModel = viewModel())
{
    Log.d("ResetPasswordPage", "Received token: $token")
    // 🔥 تخزين `token` في الـ ViewModel عند تشغيل الصفحة
    LaunchedEffect(token) {
        token?.let { viewModel.updateToken(it) }
    }
    // ----------------------- Variables ---------------------------
    val password by viewModel.password.observeAsState("")
    val passwordVisible by viewModel.passwordVisible.observeAsState(false)
    val passwordError = Validator.validatePassword(password)
    var isMatchPassword by remember { mutableStateOf(false) }
    var isFocusedPassword by remember { mutableStateOf(false) }
    val repassword by viewModel.repassword.observeAsState("")
    val token by viewModel.token.observeAsState("")



    Box{
        Column {
            // ----------------------- Skip Button ---------------------------
            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(top = 20.dp), horizontalArrangement = Arrangement.Start) {
                BackButton(onClick = { /*TODO*/ })
            }
            // ----------------------- Join Text -----------------------------
            Text(
                text = stringResource(id = R.string.ForgottenPassword),
                Modifier.padding(start = 20.dp, top = 80.dp, end = 20.dp),
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold
            )
            // Input field ------------------ Password -----------------------
            OutlinedTextField(
                value = password,
                onValueChange = { viewModel.updatePassword(it) },
                label = { Text(stringResource(id = R.string.EnterPassword)) },
                trailingIcon = {
                    Icon(
                        painter = painterResource(
                            id = if (passwordVisible) {
                                R.drawable.eye_view_icon
                            } else {
                                R.drawable.eye_closed_icon
                            }
                        ),
                        contentDescription = null,
                        tint = Color.Gray,
                        modifier = Modifier
                            .size(28.dp)
                            .clickable { viewModel.togglePasswordVisibility() }
                    )
                },
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = if (passwordError != null) Color.Red else Color.Blue,  // لون الحدود عند التركيز
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 20.dp, top = 20.dp, end = 20.dp)
                    .onFocusChanged { isFocusedPassword = it.isFocused },
                singleLine = true,
                textStyle = TextStyle(color = Color.Black),
                visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
            )
            // Text ------------------ Password Error -----------------------
            if (isFocusedPassword && passwordError != null)
            {
                Text(
                    text = passwordError,
                    modifier = Modifier
                        .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                    color = Color.Red,
                    fontSize = 12.sp
                )
            }
            // Text ------------------ Re_password -----------------------
//            Text(
//                text = stringResource(id = R.string.PasswordRules),
//                modifier = Modifier.padding(start = 24.dp, end = 24.dp, top = 5.dp),
//                fontSize = 12.sp
//            )
            //Input field ------------------ Re_password -----------------------
                    OutlinedTextField(
                        value = repassword,
                        onValueChange = { viewModel.updateRepassword(it) },
                        label = { Text("Re-Enter your password") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(start = 20.dp, top = 20.dp, end = 20.dp),
                        singleLine = true,
                        textStyle = TextStyle(color = Color.Black),
                        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                        keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password)
                    )

            // Text ------------------ Password Error -----------------------
            if (password != repassword)
            {
                Text(
                    text = "Passwords do not match",
                    modifier = Modifier
                        .padding(start = 24.dp, end = 24.dp, top = 5.dp),
                    color = Color.Red,
                    fontSize = 12.sp
                )
            }
            //-----------------------------------------------------------------------------------------------------
            //-----------------------------------------------------------------------------------------------------
            // Button ------------------ Log in -------------------------------------------------------------------
            Button(
                onClick = {
                    //ResetPasswordApi(token,password,navController,viewModel)
                    ResetPasswordApi(token ?: "", password, navController, viewModel)
                },
                Modifier
                    .padding(start = 20.dp, end = 20.dp, top = 100.dp)
                    .align(alignment = Alignment.CenterHorizontally)
                    .fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
            ) {
                Text(
                    text = stringResource(id = R.string.Submit),
                    color = Color.White
                )
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////

│   ├── SearchPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.History
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FilterChip
import androidx.compose.material3.FilterChipDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.input.key.Key
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.onKeyEvent
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.mealflow.ui.components.MealItem
import com.example.mealflow.viewModel.MealViewModel

@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)
@Composable
fun SearchPage(viewModel: MealViewModel, onMealClick: (Any) -> Unit) {
    val meals by viewModel.meals.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    var searchQuery by remember { mutableStateOf("") }

    // Focus management
    val focusManager = LocalFocusManager.current
    var isSearchFocused by remember { mutableStateOf(false) }

    // Remember search history
    val context = LocalContext.current
    val searchHistory = remember { mutableStateListOf<String>() }
    var showHistory by remember { mutableStateOf(false) }

    // Load search history from ViewModel if available
    LaunchedEffect(Unit) {
        // Ideally, this would come from ViewModel
        // For now, we'll use a dummy history for demonstration
        if (searchHistory.isEmpty()) {
            // This is temporary - should come from persistent storage via ViewModel
            searchHistory.addAll(listOf("Pasta", "Chicken", "Salad"))
        }
    }

    // Filter options
    val filterOptions = listOf("All", "Breakfast", "Lunch", "Dinner", "Dessert", "Vegetarian", "Vegan", "Gluten-Free")
    var selectedFilter by remember { mutableStateOf("All") }

    // Filter meals based on search query and selected filter
    val filteredMeals = remember(searchQuery, meals, selectedFilter) {
        meals.filter { meal ->
            val matchesSearch = searchQuery.isEmpty() ||
                    meal.name.contains(searchQuery, ignoreCase = true) ||
                    meal.description.contains(searchQuery, ignoreCase = true) ||
                    meal.tags.any { it.contains(searchQuery, ignoreCase = true) }

            val matchesFilter = selectedFilter == "All" ||
                    meal.tags.any { it.equals(selectedFilter, ignoreCase = true) }

            matchesSearch && matchesFilter
        }
    }

    // Submit search function
    fun submitSearch() {
        if (searchQuery.isNotEmpty()) {
            // Add to history if not already there
            if (!searchHistory.contains(searchQuery)) {
                searchHistory.add(0, searchQuery) // Add to beginning
                // Keep only the most recent 5 searches
                if (searchHistory.size > 5) {
                    searchHistory.removeAt(searchHistory.size - 1)
                }
            } else {
                // Move to top if already exists
                searchHistory.remove(searchQuery)
                searchHistory.add(0, searchQuery)
            }

            // In a real app, you'd save this to persistent storage via ViewModel
            // viewModel.saveSearchHistory(searchHistory)

            // Hide keyboard and history after submission
            focusManager.clearFocus()
        }
    }

    Column(modifier = Modifier.fillMaxSize()) {
        // Search bar with icons
        OutlinedTextField(
            value = searchQuery,
            onValueChange = {
                searchQuery = it
                // Only show history if field is focused and not empty
                showHistory = isSearchFocused && it.isNotEmpty() && searchHistory.isNotEmpty()
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
                .onFocusChanged { focusState ->
                    isSearchFocused = focusState.isFocused
                    showHistory = focusState.isFocused && searchQuery.isNotEmpty() && searchHistory.isNotEmpty()
                }
                .onKeyEvent { keyEvent ->
                    if (keyEvent.key == Key.Enter) {
                        submitSearch()
                        true
                    } else {
                        false
                    }
                },
            placeholder = { Text("Search for meals...") },
            singleLine = true,
            keyboardOptions = KeyboardOptions(
                imeAction = ImeAction.Search,
                keyboardType = KeyboardType.Text
            ),
            keyboardActions = KeyboardActions(
                onSearch = {
                    submitSearch()
                }
            ),
            leadingIcon = {
                Icon(
                    imageVector = Icons.Default.Search,
                    contentDescription = "Search"
                )
            },
            trailingIcon = {
                if (searchQuery.isNotEmpty()) {
                    IconButton(onClick = {
                        searchQuery = ""
                        showHistory = isSearchFocused && searchHistory.isNotEmpty()
                    }) {
                        Icon(
                            imageVector = Icons.Default.Close,
                            contentDescription = "Clear search"
                        )
                    }
                }
            }
        )

        // Filter options
        LazyRow(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(filterOptions) { filter ->
                FilterChip(
                    selected = selectedFilter == filter,
                    onClick = {
                        selectedFilter = filter
                        // Apply filter immediately
                        if (searchQuery.isNotEmpty()) {
                            submitSearch()
                        }
                    },
                    label = { Text(filter) },
                    colors = FilterChipDefaults.filterChipColors(
                        selectedContainerColor = MaterialTheme.colorScheme.primary,
                        selectedLabelColor = MaterialTheme.colorScheme.onPrimary
                    )
                )
            }
        }

        // Search history dropdown
        if (showHistory && searchHistory.isNotEmpty()) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(modifier = Modifier.padding(8.dp)) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text("Recent Searches", style = MaterialTheme.typography.titleSmall)
                        IconButton(onClick = {
                            searchHistory.clear()
                            showHistory = false
                            // In a real app, clear from persistent storage too:
                            // viewModel.clearSearchHistory()
                        }) {
                            Icon(
                                imageVector = Icons.Default.Delete,
                                contentDescription = "Clear History",
                                tint = MaterialTheme.colorScheme.error
                            )
                        }
                    }

                    Divider()

                    // Show last 5 searches
                    searchHistory.take(5).forEach { search ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clickable {
                                    searchQuery = search
                                    showHistory = false
                                    submitSearch() // Apply the search immediately when clicked
                                }
                                .padding(8.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Icon(
                                    imageVector = Icons.Default.History,
                                    contentDescription = null,
                                    modifier = Modifier.size(16.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(search)
                            }
                            IconButton(
                                onClick = {
                                    searchHistory.remove(search)
                                    // If history becomes empty, hide dropdown
                                    if (searchHistory.isEmpty()) {
                                        showHistory = false
                                    }
                                    // In a real app, remove from persistent storage too:
                                    // viewModel.removeSearchHistoryItem(search)
                                },
                                modifier = Modifier.size(24.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Close,
                                    contentDescription = "Remove",
                                    modifier = Modifier.size(16.dp)
                                )
                            }
                        }
                    }
                }
            }
        }

        // Show loading indicator, error message, or meal grid
        when {
            isLoading -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }
            filteredMeals.isEmpty() && errorMessage == null -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(
                            text = "No meals found",
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                        if (searchQuery.isNotEmpty() || selectedFilter != "All") {
                            Text(
                                text = "Try changing your search or filters",
                                style = MaterialTheme.typography.bodyMedium,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                }
            }
            errorMessage != null -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(errorMessage ?: "Something went wrong", color = MaterialTheme.colorScheme.error)
                }
            }
            else -> {
                LazyVerticalGrid(
                    columns = GridCells.Fixed(2), // 2 columns grid
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(8.dp),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    items(filteredMeals.size) { index ->
                        val meal = filteredMeals[index]
                        MealItem(
                            meal = meal,
                            onClick = {
                                // Save search when user clicks a meal
                                submitSearch()
                                onMealClick(meal)
                            }
                        )
                    }
                }
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////

│   ├── StartPage.kt

////////////////////////////////////////////////////////////////////////////////////////
package com.example.mealflow.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.mealflow.R
import com.example.mealflow.buttons.DynamicButton
import com.example.mealflow.ui.theme.MealFlowTheme

// ----------------------- Register Page ---------------------------
@Composable
fun StartPage(navController: NavController) {
    Box(modifier = Modifier.fillMaxSize()) {
        // ----------------------- Title Text -----------------------------
        Text(
            text = stringResource(id = R.string.Header),
            modifier = Modifier
                .padding(start = 20.dp, top = 100.dp, end = 20.dp)
                .align(Alignment.CenterStart),
            fontSize = 25.sp,
            fontWeight = FontWeight.Bold,
        )
        Column(
            modifier = Modifier.align(alignment = Alignment.BottomCenter)
        ) {
            // Button ------------------ Get Started -----------------------
            Button(
                onClick = { navController.navigate("Register Page") },
                modifier = Modifier
                    .padding(20.dp)
                    .align(alignment = Alignment.CenterHorizontally)
                    .width(150.dp),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
            ) {
                Text(
                    text = stringResource(id = R.string.Get_Started),
                    color = Color.White
                )
            }
            // Row ------------------ Login -----------------------
            Row(
                modifier = Modifier
                    .align(Alignment.CenterHorizontally)
                    .padding(bottom = 100.dp)
            ) {
                // ----------------------- Text -----------------------------
                Text(text = stringResource(id = R.string.Already_member))
                // ----------------------- Login (Clickable Text) -----------------------------
                Text(
                    text = "Login",
                    modifier = Modifier.clickable { navController.navigate("Login Page") },
                    color = Color.Blue
                )
            }
        }
    }
}

// ----------------------- Function to preview StartPage ---------------------------
@Preview(showSystemUi = true, showBackground = true)
@Composable
fun PreviewStartPage() {
    MealFlowTheme {
        StartPage(navController = rememberNavController())
    }
}
////////////////////////////////////////////////////////////////////////////////////////